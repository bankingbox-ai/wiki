version: 2.1

semver_filter: &semver_filter
  branches:
    ignore: "/.*/"
  tags:
    only: '/^v[0-9]+(\.[0-9]+)*-hotfix(-[0-9]+)?$/'

parameters:
  project-name:
    type: string
    default: bankingbox-wiki
  stack-name:
    type: string
    default: bankingbox-wiki-pre-prod
  stack-suffix:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  stack-name-prod:
    type: string
    default: bankingbox-wiki-prod

jobs:
  njsscan:
    docker:
      - image: cimg/python:3.9.6
    steps:
      - checkout
      - run:
          name: Install njsscan
          command: pip install --upgrade njsscan
      - run:
          name: njsscan check
          command: njsscan .

  static-tests:
    docker:
      - image: cimg/node:18.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: "install dependencies"
          command: |
            npm ci
      - save_cache:
          paths:
            - node_modules
          key: node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: "lint"
          command: npm run lint
      - run:
          name: "build site"
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - "storybook-static/"

  deploy-pre-prod:
    docker:
      - image: public.ecr.aws/g9w2x9j3/nodejs16-awscli:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: "deploy stack"
          command: |
            echo << pipeline.parameters.stack-name >>
            echo << pipeline.parameters.stack-suffix >>

            aws configure set aws_access_key_id \
              $AWS_ACCESS_KEY_ID_PRE_PROD \
              --profile default
            aws configure set aws_secret_access_key \
              $AWS_SECRET_ACCESS_KEY_PRE_PROD \
              --profile default
            aws configure set default.region $AWS_DEFAULT_REGION \
              --profile default
            sam build --template template.yaml
            sam package --resolve-s3
            sam deploy \
              --no-fail-on-empty-changeset \
              --stack-name << pipeline.parameters.stack-name >> \
              --resolve-s3 \
              --capabilities CAPABILITY_IAM \
              --parameter-overrides BucketNameSuffix=<< pipeline.parameters.stack-suffix >>

            aws cloudformation describe-stacks --stack-name << pipeline.parameters.stack-name >> > .circleci/stack.json
            node ./.circleci/parse-cloudformation-output-as-env.js >> .env
            cat .env
      - persist_to_workspace:
          root: .
          paths:
            - ".env"
      - run:
          name: "upload build"
          command: |
            cat .env
            source .env
            aws s3 sync ./build/* s3://$WEBSITE_BUCKET --only-show-errors
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
      - save_cache:
          paths:
            - .env
          key: node-v1-{{ checksum "package-lock.json" }}

  deploy-prod-env:
    docker:
      - image: public.ecr.aws/g9w2x9j3/nodejs16-awscli:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: "deploy stack en PROD"
          command: |
            aws configure set aws_access_key_id \
              $AWS_ACCESS_KEY_ID_PROD \
              --profile default
            aws configure set aws_secret_access_key \
              $AWS_SECRET_ACCESS_KEY_PROD \
              --profile default
            aws configure set default.region $AWS_DEFAULT_REGION \
              --profile default
            sam build --template template.yaml
            sam package --resolve-s3
            sam deploy \
              --no-fail-on-empty-changeset \
              --stack-name << pipeline.parameters.stack-name-prod >> \
              --resolve-s3 \
              --capabilities CAPABILITY_IAM \
              --parameter-overrides \
                env=prod \
                HostedZoneIdProd=$HOSTED_ZONE_ID_PROD

            aws cloudformation describe-stacks --stack-name << pipeline.parameters.stack-name-prod >> > .circleci/stack.json
            node ./.circleci/parse-cloudformation-output-as-env.js stack.json >> .env
      - run:
          name: "upload build"
          command: |
            source .env
            echo "LENDAAS_CDN_URL=\"$CDN_WEB_ENDPOINT\"" > .env.production
            cp .env.production storybook-static
            ls storybook-static -lah
            cat ./storybook-static/.env.production
            cat .env
            aws s3 sync ./storybook-static s3://$WEBSITE_BUCKET --only-show-errors
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
            aws s3 sync ./cdn s3://$CDN_BUCKET --only-show-errors
            aws cloudfront create-invalidation --distribution-id $CDN_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

  create-tag:
    docker:
      - image: cimg/node:16.17.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: create-tag
          command: |
            git config --global user.email "infra@lendaas.com"
            git config --global user.name "CICD Lendaas"
            export GIT_URL_WITH_TOKEN=https://${GITHUB_ACCESS_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            export GIT_COMMIT_DESC=$(git log --format=%B -n 1 $CIRCLE_SHA1)
            export GIT_COMMIT_TYPE=$(node ./.circleci/parse-commit-desc.js $GIT_COMMIT_DESC)
            git pull origin main
            export PACKAGE_VERSION=$(npm version $GIT_COMMIT_TYPE -m "$GIT_COMMIT_DESC [ci skip]")
            git remote remove origin
            git remote add origin ${GIT_URL_WITH_TOKEN}
            git push --atomic origin main $PACKAGE_VERSION

  publish-npm-library:
    docker:
      - image: cimg/node:16.17.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: "build-library"
          command: npm run build-all
      - run:
          name: "npm-publish"
          command: |
            npm config set registry https://registry.npmjs.org/
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
            npm publish

workflows:
  version: 2

  build-test-deploy-prod:
    jobs:
      - njsscan
      - static-tests
      - deploy-pre-prod:
          context: Creditu AWS Pre-prod
          requires:
            - static-tests
            - njsscan
      # - deploy-prod-env:
      #     context: Creditu AWS Prod
      #     requires:
      #       - static-tests
      #       - deploy-pre-prod
      # - create-tag:
      #     context: GitHub Credentials #GITHUB_ACCESS_TOKEN
      #     requires:
      #       - deploy-prod-env
      # - publish-npm-library:
      #     context: Lendaas NPM Account
      #     requires:
      #       - create-tag

  # deploy-prod:
  #   jobs:
  #     - njsscan:
  #         filters:
  #           <<: *semver_filter
  #     - static-tests:
  #         filters:
  #           <<: *semver_filter
  #     - deploy-prod-env:
  #         filters:
  #           <<: *semver_filter
  #         context: Creditu AWS Prod
  #         requires:
  #           - static-tests
  #           - njsscan
