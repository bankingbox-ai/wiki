"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4300],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={title:"C\xf3mo construir un test",slug:"how-to-build-a-test",authors:"benja",tags:["gu\xedas","testing"]},s=void 0,i={permalink:"/wiki/blog/how-to-build-a-test",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-28-how-to-test/index.md",source:"@site/blog/2022-09-28-how-to-test/index.md",title:"C\xf3mo construir un test",description:"En Lendaas trabajamos con TDD (o lo intentamos \ud83e\udd13), aqu\xed puedes leer un poco m\xe1s acerca",date:"2022-09-28T00:00:00.000Z",formattedDate:"28 de septiembre de 2022",tags:[{label:"gu\xedas",permalink:"/wiki/blog/tags/guias"},{label:"testing",permalink:"/wiki/blog/tags/testing"}],readingTime:4.24,hasTruncateMarker:!0,authors:[{name:"Benjam\xedn Roa",title:"Desarrollador",url:"https://gitlab.com/broa",imageURL:"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png",key:"benja"}],frontMatter:{title:"C\xf3mo construir un test",slug:"how-to-build-a-test",authors:"benja",tags:["gu\xedas","testing"]},prevItem:{title:"Flujo de trabajo ideal",permalink:"/wiki/blog/ideal-workflow"},nextItem:{title:"Retroalimentaci\xf3n entre pares",permalink:"/wiki/blog/peer-feedback"}},l={authorsImageUrls:[void 0]},u=[{value:"Qu\xe9 entendemos por un test",id:"qu\xe9-entendemos-por-un-test",level:2},{value:"Partes de un test",id:"partes-de-un-test",level:2},{value:"Ejemplos pr\xe1cticos",id:"ejemplos-pr\xe1cticos",level:2},{value:"Test Unitario",id:"test-unitario",level:3},{value:"Caso simple",id:"caso-simple",level:4},{value:"Un poco m\xe1s sofisticado",id:"un-poco-m\xe1s-sofisticado",level:4},{value:"Test de integraci\xf3n",id:"test-de-integraci\xf3n",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"En Lendaas trabajamos con TDD (o lo intentamos \ud83e\udd13), ",(0,r.kt)("a",{parentName:"p",href:"blog/testing-101"},"aqu\xed")," puedes leer un poco m\xe1s acerca\nde nuestra estrategia global. Suena bonito, pero en la pr\xe1ctica\nescribir test de distintas naturalezas antes de codear no es tan\nsencillo."),(0,r.kt)("p",null,"En este art\xedculo abordar\xe9 de forma m\xe1s concreta distintos\nescenarios cotidianos a los que nos enfrentamos y c\xf3mo resolvemos\nel test en cada uno."),(0,r.kt)("h2",{id:"qu\xe9-entendemos-por-un-test"},"Qu\xe9 entendemos por un test"),(0,r.kt)("p",null,"Un test ser\xeda un caso de prueba que tiene ciertas caracter\xedsticas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tiene un nombre o descripci\xf3n que normalmente escribimos en ingl\xe9s\ne incluye la palabra ",(0,r.kt)("em",{parentName:"li"},"should")," (deber\xeda). Cualquiera deber\xeda poder leerlo\ny entender la expectativa del test"),(0,r.kt)("li",{parentName:"ul"},"Cada test es una unidad independiente, puedo ejecutarlo por s\xed solo\ny siempre debiera obtener el mismo resultado. En otras palabras, no deber\xeda\nexistir dependencia entre mi test y el anterior"),(0,r.kt)("li",{parentName:"ul"},"El resultado del test siempre debiera ser un ",(0,r.kt)("inlineCode",{parentName:"li"},"booleano"),", un sem\xe1foro que solo\ntiene luz verde o roja (\ud83d\udfe2 / \ud83d\udd34)")),(0,r.kt)("admonition",{title:"tip",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"En algunas ocasiones traicionamos un poco la rep\xfablica independiente de cada test,\nagrupando casos de prueba que comparten estrechamente un contexto. Para esto\nusamos un ",(0,r.kt)("em",{parentName:"p"},"describe")," y describimos las coordenadas espec\xedficas que los une.")),(0,r.kt)("h2",{id:"partes-de-un-test"},"Partes de un test"),(0,r.kt)("p",null,"Cada test tiene una estructura de tres partes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Arrange"),": en esta etapa configuro todo lo necesario para que mi test pueda\nejecutarse. \xbfNecesito construir alg\xfan objeto? \xbfNecesito reemplazar alguna\ndependencia? \xbfNecesito que haya algo previamente en la base de datos?"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Act"),": aqu\xed ejecuto. Hago alguna acci\xf3n que desencadene un cambio\nen el estado observable del software. Puede ser que ejecute una petici\xf3n http\ncontra una API o simplemente ejecute un m\xe9todo"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Assert"),": ahora verifico el resultado. Esta etapa es la que determina si el test\narroja un resultado positivo o falla")),(0,r.kt)("p",null,"A tener en cuenta:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recomiendo siempre comenzar por la descripci\xf3n del test"),(0,r.kt)("li",{parentName:"ul"},"Explicitar las tres secciones suele ayudarme a tener consciencia de\nqu\xe9 / por qu\xe9 estoy haciendo algo. Suelo dejar como comentario las tres secciones\ndel test, incluso aunque pueda prescindir de una de ellas"),(0,r.kt)("li",{parentName:"ul"},"Mantener el orden y s\xedntesis es clave para que otro distinto de m\xed pueda\nentender r\xe1pidamente de qu\xe9 trata el test"),(0,r.kt)("li",{parentName:"ul"},"A veces, sobre todo cuando hay ",(0,r.kt)("inlineCode",{parentName:"li"},"mocks"),", es posible que un ",(0,r.kt)("inlineCode",{parentName:"li"},"assert")," quede anidado\ndentro del ",(0,r.kt)("inlineCode",{parentName:"li"},"arrange"),". No es deseable, pero si no lo puedo evitar, dejo un comentario expl\xedcitando este anti patr\xf3n")),(0,r.kt)("h2",{id:"ejemplos-pr\xe1cticos"},"Ejemplos pr\xe1cticos"),(0,r.kt)("h3",{id:"test-unitario"},"Test Unitario"),(0,r.kt)("h4",{id:"caso-simple"},"Caso simple"),(0,r.kt)("p",null,"Supongamos que tenemos el siguiente m\xe9todo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// math.js\nexport const sum = numbers => {\n  return numbers.reduce((total, current) => {\n    return total + current;\n  }, 0);\n};\n")),(0,r.kt)("p",null,"Un test sencillo ser\xeda algo as\xed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// math.spec.js\nimport { sum } from './math.js';\n\ntest('should sum int numbers', () => {\n  // ARRANGE\n  // Construyo el input que necesito para mi test\n  const numbers = [1, 2, 3];\n  // ACT\n  // Ejecuto la funci\xf3n y le entrego el argumento\n  const result = sum(numbers);\n  // ASSERT\n  // Reviso que el resultado sea 6\n  expect(result).toBe(6);\n});\n")),(0,r.kt)("h4",{id:"un-poco-m\xe1s-sofisticado"},"Un poco m\xe1s sofisticado"),(0,r.kt)("p",null,"Supongamos que queremos interactuar con la ",(0,r.kt)("a",{parentName:"p",href:"https://swapi.dev/"},"api de Star Wars"),"\ny obtener personajes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// api.js\nconst axios = require('axios');\n\n/**\n * Obtiene personajes desde la api de StarWars\n * @param page    N\xfamero de p\xe1gina\n * @returns       Objeto, la llave results contiene el arreglo de personajes\n */\nconst getCharacters = async (page = undefined) => {\n  const params = { page };\n  try {\n    const { data } = await axios.get(\n      `${process.env.SWAPI_BASE_URL}/people`,\n      { params }\n    );\n    return data;\n  } catch (error) {\n    throw new Error('Error fetching characters');\n  }\n};\n")),(0,r.kt)("p",null,"Dado que el objetivo del test unitario es revisar que mis l\xedneas de c\xf3digo hacen\nlo que quiero que haga y de que no quiero sobrecargar de llamadas a la api,\ntengo que construir un ",(0,r.kt)("strong",{parentName:"p"},"mock")," (sustituto) de ",(0,r.kt)("inlineCode",{parentName:"p"},"axios"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const axios = require('axios');\nconst { getCharacters } = require('./api');\n\ndescribe('./api.js', () => {\n  beforeEach(() => {\n    // para asegurar que el entorno de cada test sea \xfanico\n    process.env = {};\n  });\n\n  it('should get characters', async () => {\n    // ARRANGE\n    process.env.SWAPI_BASE_URL = 'swapi_url';\n    const axiosGetMock = jest.spyOn(axios, 'get')\n      .mockImplementationOnce(async () => ({ data: 'data' }));\n\n    // ACT\n    const characters = await getCharacters();\n\n    // ASSERT\n    expect(characters).toBe('data');\n    expect(axiosGetMock).toHaveBeenCalledWith(\n      'swapi_url/people',\n      { params: { page: undefined } }\n    );\n  });\n});\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Tal como coment\xe9 en ",(0,r.kt)("a",{parentName:"p",href:"blog/testing-101#b1-unitarios"},"este")," art\xedculo que\nintroduce los tipos de test, los unitarios persiguen la idea de probar\nexclusivamente MIS l\xedneas de c\xf3digo. Hacer ",(0,r.kt)("strong",{parentName:"p"},"mocks")," a veces no parece\nnecesario, pero es la herramienta que nos permite aislar cualquier comportamiento\najeno y as\xed, concentrarme exclusivamente en lo que me interesa.")),(0,r.kt)("h3",{id:"test-de-integraci\xf3n"},"Test de integraci\xf3n"),(0,r.kt)("p",null,"Un test de integraci\xf3n prueba los distintos componentes de una soluci\xf3n interactuando entre s\xed.\nEn este tipo de tests no se utilizan mocks de los componentes externos.\nPor el contrario, estos tests se hacen en un ambiente similar al que utilizar\xedan si el software estuviera desplegado.\nEsto significa que necesitamos contar con bases de datos, y desplegar todos los recursos de los que dependa lo que queremos testear."))}d.isMDXComponent=!0}}]);