"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5824],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),s=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return a?t.createElement(g,l(l({ref:n},u),{},{components:a})):t.createElement(g,l({ref:n},u))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8910:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));const o={},l="Configurar la CI/CD",i={unversionedId:"documentation/how-did-we/continuous-integration",id:"documentation/how-did-we/continuous-integration",title:"Configurar la CI/CD",description:"Circle CI + PoC de otras alternativas",source:"@site/docs/documentation/how-did-we/continuous-integration.md",sourceDirName:"documentation/how-did-we",slug:"/documentation/how-did-we/continuous-integration",permalink:"/docs/documentation/how-did-we/continuous-integration",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/how-did-we/continuous-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"wikiSidebar",previous:{title:"AWS SAM",permalink:"/docs/documentation/how-did-we/aws-sam"},next:{title:"Flujo de desarrollo",permalink:"/docs/documentation/how-did-we/devflow"}},c={},s=[{value:"CircleCI",id:"circleci",level:2},{value:"Conectar un nuevo repositorio",id:"conectar-un-nuevo-repositorio",level:3},{value:"Configurar CircleCI Contexts",id:"configurar-circleci-contexts",level:3},{value:"C\xf3mo ejecutar sam deploy",id:"c\xf3mo-ejecutar-sam-deploy",level:3},{value:"Estructura del archivo de configuraci\xf3n",id:"estructura-del-archivo-de-configuraci\xf3n",level:3},{value:"Correr los test de integraci\xf3n",id:"correr-los-test-de-integraci\xf3n",level:3},{value:"Ejecutar workflow al empujar tags",id:"ejecutar-workflow-al-empujar-tags",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configurar-la-cicd"},"Configurar la CI/CD"),(0,r.kt)("p",null,"Circle CI + PoC de otras alternativas"),(0,r.kt)("h2",{id:"circleci"},"CircleCI"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://circleci.com/"},"CircleCI")," es una plataforma de CI/CD de f\xe1cil configuraci\xf3n. La configuraci\xf3n se guarda en un archivo ",(0,r.kt)("inlineCode",{parentName:"p"},".circleci/config.yml"),"."),(0,r.kt)("h3",{id:"conectar-un-nuevo-repositorio"},"Conectar un nuevo repositorio"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Conectarse a CircleCI con la cuenta ",(0,r.kt)("inlineCode",{parentName:"li"},"infra@lendaas.com")),(0,r.kt)("li",{parentName:"ol"},"En el men\xfa ",(0,r.kt)("em",{parentName:"li"},"Projects"),", buscar el repositorio a conectar, y clickear en el bot\xf3n ",(0,r.kt)("em",{parentName:"li"},"Set Up Project"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Si ya existe un archivo ",(0,r.kt)("inlineCode",{parentName:"li"},".circleci/config.yml"),", elegir la opci\xf3n ",(0,r.kt)("em",{parentName:"li"},"Fastest"),". Sino, elegir la opci\xf3n ",(0,r.kt)("em",{parentName:"li"},"Faster"),".")))),(0,r.kt)("h3",{id:"configurar-circleci-contexts"},"Configurar CircleCI Contexts"),(0,r.kt)("p",null,"En CircleCI, podemos guardar secretos o parametros en un contexto dentro del men\xfa ",(0,r.kt)("inlineCode",{parentName:"p"},"Organization Settings"),"."),(0,r.kt)("p",null,"Para poder levantar los ambientes de test en el ambiente de cada desarrollador, configuramos un contexto llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"Vault Devs AWS Accounts"),"."),(0,r.kt)("p",null,"Cada desarrollador configura las  credenciales de su cuenta AWS Lendaas personal con los siguientes parametros:"),(0,r.kt)("p",null,"C\xf3mo sufijo para los parametros de credenciales, incluir la parte de la izquierda del correo electronico. ej: benja para ",(0,r.kt)("a",{parentName:"p",href:"mailto:benja@lendaas.com"},"benja@lendaas.com")," adicionando un _ (gui\xf3n bajo)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"benja"),"_AWS_ACCESS_KEY_ID --\x3e aws_acces_key de su cuenta personal de AWS Lendaas"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"benja"),"_AWS_SECRET_ACCESS_KEY --\x3e aws_secret_acces_key de su cuenta personal de AWS Lendaas")),(0,r.kt)("h3",{id:"c\xf3mo-ejecutar-sam-deploy"},"C\xf3mo ejecutar sam deploy"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Se sigui\xf3 esta ",(0,r.kt)("a",{parentName:"li",href:"https://circleci.com/developer/orbs/orb/circleci/aws-sam-serverless"},"gu\xeda")),(0,r.kt)("li",{parentName:"ol"},"copiar el siguiente c\xf3digo en secci\xf3n workflow de ",(0,r.kt)("inlineCode",{parentName:"li"},".circleci/config.yml"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- sam/deploy:\n    context: AWS LendAAS Guillaume\n    name: deploy-staging\n    s3-bucket: aws-sam-cli-managed-default-samclisourcebucket-1s9opp4i2250y\n    stack-name: staging-stack\n    template: ./template.yaml\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Rescatar el endpoint del output para los siguientes pasos."),(0,r.kt)("li",{parentName:"ol"},"En el men\xfa ",(0,r.kt)("em",{parentName:"li"},"Projects"),", buscar el repositorio a conectar, y clicar en el bot\xf3n ",(0,r.kt)("em",{parentName:"li"},"Set Up Project"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Si ya existe un archivo ",(0,r.kt)("inlineCode",{parentName:"li"},".circleci/config.yml"),", elegir la opci\xf3n ",(0,r.kt)("em",{parentName:"li"},"Fastest"),". Si no, elegir la opci\xf3n ",(0,r.kt)("em",{parentName:"li"},"Faster"),".")))),(0,r.kt)("h3",{id:"estructura-del-archivo-de-configuraci\xf3n"},"Estructura del archivo de configuraci\xf3n"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".circleci/config.yml")),(0,r.kt)("p",null,"Ejemplo de archivo de configuraci\xf3n de CircleCI para un proyecto TypeScript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"version: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/node:16.17.0\n    steps:\n      - run: npm install\n      - run: npm run build\nworkflows:\n  build-app:\n    jobs:\n      - build\n")),(0,r.kt)("p",null,"Step para obtener el endpoint de la API de un deploy de SAM:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'      - run:\n          name: get-api-gateway-url\n          # echo \'export MY_ENV_VAR="FOO"\' >> "$BASH_ENV"\n          command: |\n            export STACK_NAME=staging-stack\n            aws apigateway get-rest-apis > api-list.json\n            API_ID=$(cat api-list.json | jq -r ".[][] | select (.name == \\"$STACK_NAME\\").id")\n            export API_ID\n            export API_GET_URL=https://"$API_ID".execute-api.us-east-1.amazonaws.com/Prod\n')),(0,r.kt)("p",null,"Persistir archivos entre jobs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"      - persist_to_workspace:\n          root: .\n          paths:\n            - .build\n")),(0,r.kt)("p",null,"Restaurar archivos entre jobs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"      - attach_workspace:\n          at: .\n")),(0,r.kt)("h3",{id:"correr-los-test-de-integraci\xf3n"},"Correr los test de integraci\xf3n"),(0,r.kt)("p",null,"Ya que queremos que cada deploy se haga en su propio ambiente de ejecuci\xf3n, y el orbe que est\xe1bamos usando de SAM no permite usar la opci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"--resolve-s3"),", resolvimos realizar manualmente el paso de despliegue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  deploy-sam:\n    docker:\n      - image: public.ecr.aws/g9w2x9j3/nodejs16-awscli:latest\n    steps:\n      - checkout\n      - run: |\n          cat $BASH_ENV\n          echo $AWS_ACCESS_KEY_ID\n          sam build \\\n            --template template.yaml \\\n            --region us-east-1\n          sam package \\\n            --resolve-s3 \\\n            --region us-east-1\n          sam deploy \\\n            --stack-name << pipeline.parameters.stack-name >> \\\n            --resolve-s3 \\\n            --capabilities CAPABILITY_IAM \\\n            --region us-east-1\n")),(0,r.kt)("p",null,"Al final de correr los test de integraci\xf3n destruimos el stack sin importar que pase o no el test.\nEn el yaml aumentamos el siguiente step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  functional-test:\n     docker:\n        - image: public.ecr.aws/g9w2x9j3/nodejs16-awscli:latest\n     steps:\n        - checkout\n        - attach_workspace:\n             at: .\n        - run:\n             name: integration-tests\n             command: |\n                source .env\n                echo ${API_GATEWAY_URL}\n                npm ci\n                npm run test:functional\n        - run:\n             when: always\n             command: |\n                aws cloudformation delete-stack --stack-name staging-stack\n")),(0,r.kt)("h3",{id:"ejecutar-workflow-al-empujar-tags"},"Ejecutar workflow al empujar tags"),(0,r.kt)("p",null,"Es deseable poder ejecutar ciertos workflows al empujar tags, por ejemplo, para desplegar en producci\xf3n.\nPara hacer esto, nos guiamos seg\xfan ",(0,r.kt)("a",{parentName:"p",href:"https://discuss.circleci.com/t/workflow-job-with-tag-filter-being-run-for-every-commit/20762"},"estos")," ",(0,r.kt)("a",{parentName:"p",href:"https://discuss.circleci.com/t/workflow-is-not-triggered-by-tag-push-on-github/34421"},"posts"),".\nLa indicaci\xf3n que se da en ellos es agregar los siguientes filtros a la ejecuci\xf3n de los jobs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"...  \ndeploy-production:\n    jobs:\n      - production_build:\n          filters:\n            branches:\n              ignore: /.*/\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n...\n")),(0,r.kt)("p",null,"Sin embargo, este approach no nos ha dado buenos resultados.\nLos filtros se comportan como OR l\xf3gicos, y por defecto los jobs se gatillan en todas las ramas.\nEsto provoca que, sin el filtro ",(0,r.kt)("inlineCode",{parentName:"p"},"branches"),", el pipeline se gatille dos veces si pusheamos el tag: una por el commit y otra por el tag.\nEl filtro ",(0,r.kt)("inlineCode",{parentName:"p"},"branches")," pretende evitar que el pipeline se gatille con los push, pero en nuestro caso impide que el pipeline se ejecute del todo."),(0,r.kt)("p",null,"Finalmente, la soluci\xf3n fue (insertar soluci\xf3n)."))}d.isMDXComponent=!0}}]);