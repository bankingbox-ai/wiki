"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"tdd-bdd-ddd","metadata":{"permalink":"/blog/tdd-bdd-ddd","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/index.md","source":"@site/blog/index.md","title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","description":"cat dev","date":"2023-03-29T05:47:02.000Z","formattedDate":"29 de marzo de 2023","tags":[{"label":"testing","permalink":"/blog/tags/testing"},{"label":"guias","permalink":"/blog/tags/guias"}],"readingTime":6.375,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"slug":"tdd-bdd-ddd","title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","authors":["benja"],"image":"./assets/cat-dev.jpg","tags":["testing","guias"]},"nextItem":{"title":"Cr\xf3nica de la elecci\xf3n de un sistema de integraci\xf3n continua","permalink":"/blog/picking-cicd-system"}},"content":"![cat dev](./assets/cat-dev.jpg)\\r\\n\\r\\nPaseando un poco en Google, es muy f\xe1cil encontrar una tremenda cantidad de Gur\xfas que prometen\\r\\nmejorar tu forma de desarrollar. Lo m\xe1s probable es que existan tantas estrategias como personas en el planeta, y que cada uno deba experimentar hasta encontrar la propia.\\r\\n\\r\\nEn este art\xedculo explicar\xe9 c\xf3mo podr\xedan utilizarse `BDD` y `DDD` en conjunto con `TDD`. Puede ponerse medio arenoso el camino\\r\\ny no est\xe1 f\xe1cil encontrar el nivel de detalle/profundidad\\r\\nque debiera darle a cada arista, veamos qu\xe9 sale.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \xbfBEDEQU\xc9?\\r\\n\\r\\nPara comenzar, vamos a repasar r\xe1pidamente en qu\xe9 consisten estas maravillosas siglas. Tres metodolog\xedas:\\r\\n\\r\\n### [Test Driven Development (TDD) - 2003](https://en.wikipedia.org/wiki/Test-driven_development)\\r\\n\\r\\n[Kent Beck](https://www.kentbeck.com) nos propone un flujo de trabajo guiado por los test. Comienzas con un test, te aseguras\\r\\nde que falle (\ud83d\udd34); escribes el m\xednimo de l\xedneas de c\xf3digo necesario para satisfacerlo, te aseguras de que ahora el test pase (\ud83d\udfe2);\\r\\ny luego te preguntas c\xf3mo puedo ordenar/organizar/abstraer mejor la soluci\xf3n (refactor \ud83d\udc68\u200d\ud83c\udfed). Es un m\xe9todo incremental que pretende\\r\\nmejorar tus resultados oblig\xe1ndote a poner el objetivo (test) por delante de tus ganas de lanzarte a escribir c\xf3digo.\\r\\n\\r\\n### [Domain Driven Design (DDD) - 2004](https://www.amazon.com/-/es/Eric-Evans/dp/0321125215)\\r\\n\\r\\nErik Evans, por su lado, propone dejar el dominio al centro y crear un lenguaje com\xfan entre el software y el negocio que permita modelar\\r\\nmejor los problemas y fomente la colaboraci\xf3n entre los distintos actores\\r\\n([ubiquitous language](https://martinfowler.com/bliki/UbiquitousLanguage.html)), derribando las barreras entre lo t\xe9cnico\\r\\ny lo no-t\xe9cnico. La idea es mejorar la comunicaci\xf3n para poder alinear objetivos, flexibilizar, mejorar la calidad del c\xf3digo y\\r\\norientarlo siempre al negocio.\\r\\n\\r\\n### [Behaviour Driven Development (BDD) - 2011](https://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379)\\r\\n\\r\\n[Dan North](https://dannorth.net) en respuesta a TDD, propone que manteniendo sus principios, agreguemos una capa superior que\\r\\npermita dise\xf1ar la soluci\xf3n en base al comportamiento que un usuario debiera experimentar al interactuar con ella. Los objetivos\\r\\nestar\xedan definidos en t\xe9rminos de estas expectativas que el usuario tendr\xeda y se acordar\xedan con el Product Owner (PO) como criterios\\r\\nde aceptaci\xf3n. Para especificar estos acuerdos, propone el uso de `functional specifications` que vendr\xeda siendo un documento\\r\\nque describe escenarios, ejemplos y casos de uso; todo potencialmente automatizable. Tal como en `TDD`, pero de alto nivel: \ud83d\udfe5, \ud83d\udfe9 y \ud83d\udc68\u200d\ud83c\udfed. Postula que la colaboraci\xf3n entre el usuario\\r\\ny el equipo de desarrollo mejorar\xeda la definici\xf3n de lo que hay que desarrollar, su scope y la calidad del resultado.\\r\\n\\r\\nCada una de ellas tiene bastante literatura y teor\xeda, da para estudiarlas un buen rato. En este art\xedculo no profundizar\xe9\\r\\nmuch\xedsimo m\xe1s en cada una, pero s\xed te lo recomiendo encarecidamente.\\r\\n\\r\\n## C\xf3mo combinarlos\\r\\n\\r\\nAhora vamos a lo bueno.\\r\\n\\r\\n### Previo al desarrollo: refinamiento\\r\\n\\r\\nEn nuestro [backlog](https://scrumguides.org/scrum-guide.html#product-backlog) hay muchos potenciales incrementos,\\r\\ncada uno de ellos consiste en una idea de mejora del software.\\r\\nEl equipo de desarrollo toma cada una de estas ideas y las _procesa_ aplicando la `DOR`\\r\\n([Definition of Ready](https://www.scruminc.com/definition-of-ready/)), a este proceso lo conocemos como\\r\\n[refinamiento](https://less.works/less/framework/product-backlog-refinement).\\r\\n\\r\\nEl producto del refinamiento, adem\xe1s del dise\xf1o de una soluci\xf3n, ser\xe1 una\\r\\ndefinici\xf3n de la historia de\\r\\nusuario, la forma en que se podr\xe1 medir el incremento y acordaremos con el PO los criterios de aceptaci\xf3n aplicando estrategias de `BDD` y `DDD`.\\r\\nEstos \xfaltimos, si\\r\\nbien inicialmente solo estar\xe1n enunciados, debieran ser potencialmente programables como un test automatizado.\\r\\n\\r\\n#### BDD\\r\\n\\r\\nComenzamos a comprender el problema desde la perspectiva del usuario.\\r\\n\\r\\n:::tip Preguntas gu\xedas / BDD\\r\\n\\r\\n- \xbfQui\xe9n es el usuario?\\r\\n- \xbfQui\xe9n de mi equipo u organizaci\xf3n lo conoce de cerca?\\r\\n- \xbfQu\xe9 informaci\xf3n cuanti/cualitativa tengo o puedo conseguir acerca de su problem\xe1tica?\\r\\n- \xbfPuedo conversar con alguien que represente personalmente a ese usuario?\\r\\n- \xbfEn qu\xe9 escenarios o situaciones el usuario tiene la problem\xe1tica?\\r\\n- \xbfQu\xe9 expectativas tiene?\\r\\n- \xbfC\xf3mo puedo satisfacer esas expectativas?\\r\\n\\r\\n:::\\r\\n\\r\\n#### DDD\\r\\n\\r\\nLuego analizo c\xf3mo el negocio / organizaci\xf3n responde o debiera responder ante esta necesidad del usuario. Es\\r\\nprobable que alguna de estas situaciones ya est\xe9n siendo atendidas o que la organizaci\xf3n tenga algunas particularidades relevantes a tener en cuenta.\\r\\n\\r\\n:::tip Preguntas gu\xedas / DDD\\r\\n\\r\\n- \xbfConvers\xe9 con todos los actores de mi organizaci\xf3n que han enfrentado este problema antes?\\r\\n- \xbfAnalic\xe9 c\xf3mo lo resolv\xedan?\\r\\n- \xbfDise\xf1\xe9 un proceso para atender la necesidad? \xbfLo convers\xe9 con los otros actores de mi organizaci\xf3n?\\r\\n- \xbfQu\xe9 reglas de negocio, normativas o regulaciones debiera tener en cuenta?\\r\\n- \xbfExiste alg\xfan algoritmo o l\xf3gica complicada que sea relevante?\\r\\n- \xbfQu\xe9 objetos de valor o entidades estoy enriqueciendo o\\r\\nmodificando con este incremento?\\r\\n- \xbfQu\xe9 desarrolladores/equipos tienen o deber\xedan tener relaci\xf3n con esta historia?\\r\\n- \xbfConsider\xe9 en mi soluci\xf3n procesos de negocio o acuerdos est\xe1ndares de mi organizaci\xf3n (auditor\xeda, por ejemplo)?\\r\\n- \xbfConsider\xe9 la continuidad operacional del negocio? \xbfC\xf3mo mi soluci\xf3n impacta en el negocio?\\r\\n\\r\\n:::\\r\\n\\r\\n`BDD` y `DDD` nos ayudan a definir criterios de aceptaci\xf3n con foco en el objetivo (__outcome__).\\r\\n\\r\\n### Planning\\r\\n\\r\\nDurante la [__planning__](https://less.works/less/framework/sprint-planning-one),\\r\\ncada equipo elige un incremento que est\xe9 _listo_, para estos efectos:\\r\\nque al menos haya pasado por el proceso de refinamiento y cuente con\\r\\ncriterios de aceptaci\xf3n ya acordados con el PO.\\r\\n\\r\\nSi bien buena parte del trabajo debiera venir avanzado, ahora\\r\\nrevisar\xe9 y, si es necesario, dudar\xe9 de lo acordado. Intentar\xe9 aplicar\\r\\n_slicing_ (cortar el incremendo en incrementos m\xe1s peque\xf1os) y re-negociar\xe9\\r\\ncon el PO potenciales cambios o mejoras sobre los criterios de aceptaci\xf3n.\\r\\n\\r\\nEn este momento, tambi\xe9n, el equipo dise\xf1ar\xe1 una estrategia para el\\r\\nsprint: c\xf3mo dosificar la entrega del valor. Conseguir que el _delivery/release_ sea cotidiano le quitar\xe1 el riesgo a mi sprint y bajar\xe1 la\\r\\nansiedad de __La Gran Entrega__ justo antes de la _review_.\\r\\n\\r\\n### Desarrollo\\r\\n\\r\\nUna vez que, como equipo, elegimos un item del backlog y planificamos el _sprint_: comienza el desarrollo.\\r\\n\\r\\n#### Criterios de aceptaci\xf3n como test\\r\\n\\r\\nOrganizar\xe9 los criterios de aceptaci\xf3n de forma secuencial, suponiendo que\\r\\nexiste cierta linealidad en ellos. Los agrupar\xe9 en peque\xf1os _releases_\\r\\n(funcionalidades que puedo sacar a producci\xf3n). Tomar\xe9 el primero de ellos.\\r\\n\\r\\nComenzar\xe9 mi desarrollo con dos piezas claves:\\r\\n\\r\\n- Programar\xe9 los criterios de aceptaci\xf3n como [tests orientados al funcionamiento](blog/testing-101/#a-orientados-al-funcionamiento-black-box) [`BDD` y `TDD`, test fallando (\ud83d\udfe5)]\\r\\n- Configurar\xe9 y desplegar\xe9 [feature-toggles](https://en.wikipedia.org/wiki/Feature_toggle) necesarios para que mi incremento pueda vivir en producci\xf3n\\r\\nsin entorpecer el funcionamiento del resto del software\\r\\n\\r\\n#### Programaci\xf3n\\r\\n\\r\\n\xa1Ahora a programar!, usar\xe9 `DDD` y `TDD` para definir peque\xf1as funcionalidades: escribir\xe9 un test unitario (\ud83d\udd34), las l\xedneas de c\xf3digo que lo satisfagan (\ud83d\udfe2) y el refactor (\ud83d\udc68\u200d\ud83c\udfed).\\r\\n\\r\\nSeguir\xe9 programando test unitarios hasta conseguir que los test asociadas a mis criterios de aceptaci\xf3n pasen (`BDD`, \ud83d\udfe9) y en ese momento, tengo mi primer incremento listo para ser desplegado en producci\xf3n.\\r\\n\\r\\n### Rinse & Repeat\\r\\n\\r\\n![tdd double loop](./assets/double-tdd-schema.png)\\r\\n\\r\\nEste proceso incremental se repetir\xe1, intentando concentrar\\r\\nestrat\xe9gicamente el valor de la historia en los primeros\\r\\nreleases y, dejando para el final las mejoras que el\\r\\nequipo hayan decidido hacer por sobre los criterios acordados con el PO.\\r\\n\\r\\n## Recapitulando\\r\\n\\r\\n![outside in testing](./assets/outside-in-testing.png)\\r\\n\\r\\nComo ya habr\xe1n podido ver, cada paso de nuestro flujo de trabajo tiene una pincelada importante de estas estrategias.\\r\\n\\r\\nAlgunas ideas para cerrar:\\r\\n\\r\\n- DDD nos entrega la perspectiva del negocio, la visi\xf3n global, la estructura del dominio y la capacidad para abordar problemas t\xe9cnicos de forma consistente\\r\\n- BDD, la perspectiva del usuario. El permanente recordatorio de que tenemos que entender un problema real que aqueja a una persona\\r\\n- TDD, nos entrega herramientas para crear casos de prueba previo al desarrollo y ayuda a siempre mantener el foco\\r\\n\\r\\nConseguir desarrollar este ciclo con maestr\xeda puede tomar mucho tiempo, requiere disciplina, tenacidad, paciencia y, sobre todo, repetici\xf3n. Mucha repetici\xf3n.\\r\\n\\r\\n## Recursos\\r\\n\\r\\n- [Test Driven Development: By Example / Kent Beck / 2000](https://www.amazon.com/-/es/gp/product/B095SQ9WP4/)\\r\\n- [Reference - Domain-Driven Design / Eric Evans / 2015](https://www.domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf)\\r\\n- [Introducing BDD / Dan North / 2006](https://dannorth.net/introducing-bdd/)\\r\\n\\r\\n![meme](./assets/yoda-meme.jpg)"},{"id":"picking-cicd-system","metadata":{"permalink":"/blog/picking-cicd-system","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-10-04-picking-cicd-system/index.md","source":"@site/blog/2022-10-04-picking-cicd-system/index.md","title":"Cr\xf3nica de la elecci\xf3n de un sistema de integraci\xf3n continua","description":"Durante las \xfaltimas semanas, decidimos trabajar en la ardua tarea de implementar un sistema de integraci\xf3n/despliegue continuo.","date":"2022-10-04T00:00:00.000Z","formattedDate":"4 de octubre de 2022","tags":[{"label":"tooling","permalink":"/blog/tags/tooling"},{"label":"guide","permalink":"/blog/tags/guide"}],"readingTime":5.465,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Cr\xf3nica de la elecci\xf3n de un sistema de integraci\xf3n continua","slug":"picking-cicd-system","authors":["benja"],"tags":["tooling","guide"]},"prevItem":{"title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","permalink":"/blog/tdd-bdd-ddd"},"nextItem":{"title":"Flujo de trabajo de Lendaas","permalink":"/blog/lendaas-workflow"}},"content":"Durante las \xfaltimas semanas, decidimos trabajar en la ardua tarea de implementar un sistema de integraci\xf3n/despliegue continuo.\\r\\n\\r\\nNo ha sido un viaje libre de tropiezos, por aqu\xed\\r\\nles contamos el camino que recorrimos, las decisiones que fuimos tomando y a d\xf3nde llegamos.\\r\\n\\r\\n![finding cicd](./finding-cicd.png)\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Qu\xe9 es un sistema de integraci\xf3n/despliegue continuo\\r\\n\\r\\nM\xe1s conocidas por sus siglas en ingl\xe9s: Continuous Integration [CI] & Continuous Delivery [CD], son dos conceptos muy\\r\\nrelevantes para el desarrollo de software.\\r\\n\\r\\n### Integraci\xf3n Continua (CI)\\r\\n\\r\\nEs la pr\xe1ctica de integrar nuevas l\xedneas de c\xf3digo de forma\\r\\n(muy) frecuente a un repositorio compartido. Acortar el\\r\\ntiempo que hay entre cada nuevo cambio del software\\r\\nevita la posibilidad de conflictos y nos obliga a mantener un nivel de\\r\\ncomunicaci\xf3n estrecho entre los desarrolladores del equipo.\\r\\n\\r\\n### Despliegue Continuo (CD)\\r\\n\\r\\nTradicionalmente cuando un desarrollador terminaba algo, continuaba con una larga\\r\\nseguidilla de tareas que permit\xeda dejar esa nueva mejora en producci\xf3n. Este\\r\\nproceso pod\xeda incluir cosas como: probar el c\xf3digo localmente, empaquetar\\r\\nel c\xf3digo, autidarlo, desplegarlo en un ambiente pre-productivo, volver\\r\\na probarlo (manual y automatizadamente), pedir autorizaci\xf3n a otros,\\r\\ny, si vamos bien hasta ah\xed: desplegar en producci\xf3n.\\r\\n\\r\\nEl despliegue continuo se encarga de automatizar todo lo anterior para\\r\\nasegurar que los acuerdos t\xe9cnicos se cumplan de manera estandarizada y\\r\\nconsigamos llegar a producci\xf3n de la forma menos friccionada posible.\\r\\n\\r\\nLa premisa es: automatizar todo lo que sea automatizable.\\r\\n\\r\\n### Sistema de integraci\xf3n/despliegue continuo\\r\\n\\r\\nPor lo tanto un sistema de integraci\xf3n/delivery continuo es una serie de\\r\\nacuerdos, formas de trabajar y herramientas que nos permiten automatizar\\r\\nla forma en que nuestro c\xf3digo se transforma en una aplicaci\xf3n productiva.\\r\\n\\r\\n## Por qu\xe9 es importante\\r\\n\\r\\nEs fundamental tener un proceso aceitado, claro y transparente para todos\\r\\npor muchas razones, algunas de ellas:\\r\\n\\r\\n- Trabajamos con el [Framework LeSS](https://www.less.works) y queremos\\r\\nevitar a toda costa tener equipos a cargo de etapas de desarrollo (QA, DevOps, UX etc).\\r\\n[Aqu\xed](https://less.works/less/structure/teams#Donthavephase-basedresourceallocation)\\r\\npuedes leer m\xe1s acerca de las recomendaciones que tiene LeSS para sus equipos\\r\\n- Queremos implementar `TDD` como parte de nuestro flujo de trabajo para, ojal\xe1,\\r\\nliberar peque\xf1os incrementos diariamente. Contar con herramientas para que\\r\\nnuestro equipo pueda ver ese test fallando (\ud83d\udd34) y que su c\xf3digo sea llevado\\r\\ndirecto a producci\xf3n apenas sea posible, es parte importante de la metodolog\xeda\\r\\n- Nos permite reducir nuestro CycleTime, medida importante de eficiencia para\\r\\nnuestros equipos\\r\\n- Asegurar que se ejecuten las suites de tests y que se respeten\\r\\nlos acuerdos t\xe9cnicos del equipo\\r\\n- Transparentar el historial completo de despliegues de nuestro software\\r\\n\\r\\n## La b\xfasqueda\\r\\n\\r\\nDesde este lugar, comenzamos nuestra b\xfasqueda.\\r\\n\\r\\n![cicd benchmark](./Top-5-CICD-Tools-1024x558.webp)\\r\\n\x3c!-- markdownlint-disable-next-line MD033 --\x3e\\r\\n<p align=\\"center\\">Tomado de: <a href=\\"https://katalon.com/resources-center/blog/ci-cd-tools\\">Katalon / Best 14 CI/CD Tools You Must Know | Updated for 2022</a></p>\\r\\n\\r\\nPara salir adelante con la implementaci\xf3n de este tipo de herramientas\\r\\nno basta con leer art\xedculos y ver videos, hay que lanzarse a probar hasta\\r\\ndar con alguna soluci\xf3n que sea convincente.\\r\\n\\r\\n### La promesa de AWS\\r\\n\\r\\nFue la primera opci\xf3n que miramos seriamente, pensamos que era l\xf3gico que si usamos la nube de AWS\\r\\nnaturalmente podr\xedamos usar su sistema de integraci\xf3n continua de forma nativa.\\r\\n\\r\\nC\xf3mo (parece que) funciona:\\r\\n\\r\\n- A diferencia de nuestra experiencia con Drone, en AWS no existe la idea del `runner` (una m\xe1quina que\\r\\nest\xe1 disponible para ejecutar trabajos [_pipelines_]), sino que es necesario crear una serie de recursos\\r\\nespec\xedficos que son orquestados en cada despliegue (`AWS Pipelines`, `AWS CodeBuild`, `AWS CodeDeploy`)\\r\\n- La definici\xf3n de los pasos que ejecuta el _pipeline_ vivir\xeda en estos recursos de AWS\\r\\n- Dado que queremos que la definici\xf3n del _stack_ viva en el mismo repositorio, desarrollamos los recursos\\r\\nde AWS y los desplegamos usando el `CLI` de `SAM` y `CloudFormation`\\r\\n\\r\\nResultado:\\r\\n\\r\\n- La interfaz del despliegue es tosca o no muy amigable\\r\\n- El proceso es bastante m\xe1s lento de lo que era en Drone\\r\\n- Si bien el potencial que tiene la herramienta es tremendo (b\xe1sicamente puedes orquestar cualquier\\r\\nservicio de AWS durante el proceso de despliegue), nos result\xf3 sumamente complicado y poco escalable\\r\\npara una organizaci\xf3n como la nuestra, donde son muchos los repositorios\\r\\n\\r\\nFinalmente decidimos seguir buscando.\\r\\n\\r\\n### CircleCi\\r\\n\\r\\n#### Amor a primera vista\\r\\n\\r\\nDesde que comenzamos, la experiencia fue interesante. Conseguimos integrarnos y probar muy r\xe1pidamente.\\r\\nOfrece la posibilidad de usar [Orbs](https://circleci.com/docs/orb-intro) que parec\xedan simplificar bastante\\r\\nla especificaci\xf3n de pasos recurrentes (y puedes crear los tuyos!).\\r\\n\\r\\n#### Proof of Concept (POC)\\r\\n\\r\\nImplementamos el siguiente flujo\\r\\n\\r\\n- Al empujar en la rama principal arranca el pipeline\\r\\n- Ejecuta an\xe1lisis est\xe1tico de c\xf3digo, revisa linters y test unitarios\\r\\n- Despliega infraestructura en la cuenta personal de cada desarrollador\\r\\n- Obtiene el output de la infraestructura creada y lo deja como variables de entorno\\r\\n- Ejecuta test funcionales directamente contra la infraestructura que fue desplegada\\r\\n- Independiente del resultado de los test funcionales, destruye la infraestructura\\r\\n- Despliega en producci\xf3n\\r\\n\\r\\n#### Contratiempos\\r\\n\\r\\nConseguimos sacar adelante la POC, pero no sin problemas.\\r\\n\\r\\n- No fue f\xe1cil manejar [contextos](https://circleci.com/docs/contexts) espec\xedficos\\r\\npara manejar los secretos de cada desarrollador\\r\\n(finalmente llegamos a una especie de soluci\xf3n/hack)\\r\\n- La integraci\xf3n de CircleCI con GitLab dejaba bastante que desear, algunas variables de\\r\\nentorno no exist\xedan, los filtros funcionaban err\xe1ticamente\\r\\n- No pod\xedas entregarle el contexto con los secretos a varios de los orbs que provee\\r\\nCircleCI, como nuestra intenci\xf3n era desplegar en distintos entornos finalmente\\r\\ndesistimos de usar algunos Orbs que se ve\xedan prometedores\\r\\n- Los [anchors](https://circleci.com/docs/introduction-to-yaml-configurations#anchors-and-aliases)\\r\\nsi bien est\xe1n documentados, no parecen funcionar siempre. Obligados a repetir l\xedneas de c\xf3digo\\r\\n\\r\\n#### Pros\\r\\n\\r\\n- Permite modularizar l\xf3gica en peque\xf1os scripts que viven fuera de la definici\xf3n del template (`.sh` o `.js`)\\r\\n- Es realmente r\xe1pido, tiene una muy buena gesti\xf3n de contenedores pre-cargados e im\xe1genes optimizadas\\r\\n- Puedes entregarle los informes de los test y crea estad\xedsticas muy interesantes acerca de su desempe\xf1o,\\r\\nidentifica `flaky test` (test err\xe1ticos) y entrega bastante informaci\xf3n digerida para mejorar la estrategia\\r\\nde testing\\r\\n- Entrega muchos detalles acerca de la gesti\xf3n de las m\xe1quinas que ejecutan los pipelines\\r\\n\\r\\n### Buddy\\r\\n\\r\\nHicimos una prueba sencilla y nos quedamos con las ganas de probarlo en profundidad. La interfaz\\r\\nse ve bastante buena y parece soportar bastantes servicios. Nos llam\xf3 la atenci\xf3n que ofrece un\\r\\nasistente muy completo para crear tu pipeline en el navegador, pero no entrega inmedi\xe1tamente\\r\\ndirectrices para implementar tu pipeline desde el c\xf3digo. Quiz\xe1 nos falt\xf3 tiempo.\\r\\n\\r\\n## Conclusiones y aprendizajes\\r\\n\\r\\nFinalmente decidimos quedarnos con GitHub + CircleCI.\\r\\n\\r\\nExisten muchas m\xe1s alternativas que no probamos, el panorama\\r\\nes extenso y queda bastante por investigar en este tema. Por\\r\\nahora estamos satisfechos con el resultado."},{"id":"lendaas-workflow","metadata":{"permalink":"/blog/lendaas-workflow","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-29-idea-workflow/index.md","source":"@site/blog/2022-09-29-idea-workflow/index.md","title":"Flujo de trabajo de Lendaas","description":"Definir c\xf3mo desarrollar es complejo. Se intersectan temas de cultura organizacional,","date":"2022-09-29T00:00:00.000Z","formattedDate":"29 de septiembre de 2022","tags":[{"label":"tooling","permalink":"/blog/tags/tooling"},{"label":"guide","permalink":"/blog/tags/guide"}],"readingTime":3.985,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Flujo de trabajo de Lendaas","slug":"lendaas-workflow","authors":["benja"],"tags":["tooling","guide"]},"prevItem":{"title":"Cr\xf3nica de la elecci\xf3n de un sistema de integraci\xf3n continua","permalink":"/blog/picking-cicd-system"},"nextItem":{"title":"C\xf3mo construir un test","permalink":"/blog/how-to-build-a-test"}},"content":"Definir c\xf3mo desarrollar es complejo. Se intersectan temas de cultura organizacional,\\r\\nframework de trabajo, acuerdos de equipo, acuerdos t\xe9cnicos y, si le agregas automatizaci\xf3n,\\r\\nunas cuantas l\xedneas de c\xf3digo.\\r\\n\\r\\nDejamos algunas reflexiones y cabezazos que nos hemos dados con este tema.\\r\\n\\r\\n![workflow](./workflow-main-image.jpeg)\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Como sol\xedamos trabajar\\r\\n\\r\\n### Feature branching + Drone\\r\\n\\r\\nEl flujo de trabajo que conocemos ser\xeda m\xe1s o menos as\xed:\\r\\n\\r\\n- Creo una rama a partir de la rama principal del repositorio\\r\\n- Dise\xf1o mis test y las mejoras que quiero hacer en el c\xf3digo\\r\\n- Creo un _merge request_, en ese momento se gatilla un _pipeline_ en\\r\\nel Drone que asegura calidad: audita, ejecuta _linters_ y tests\\r\\n- Si pas\xe9 exitosamente por el proceso de aseguramiento de calidad, habilita\\r\\nla opci\xf3n para que sea posible _mergear_ a la rama principal\\r\\n- Ejecuto el _merge_ y ahora el nuevo c\xf3digo es parte de la rama principal\\r\\n- Al empujar un _tag_ en el repositorio, se gatilla un nuevo _pipeline_ que,\\r\\nadem\xe1s de asegurar calidad, despliega la nueva versi\xf3n del software en\\r\\nproducci\xf3n\\r\\n\\r\\nDesde este lugar comienza nuestro viaje y sobre esta base comienza nuestra conversaci\xf3n.\\r\\n\\r\\n### Pros\\r\\n\\r\\n- Drone cuenta con una muy linda y amigable interfaz\\r\\n- M\xe1s vale diablo conocido que diablo por conocer, ...dicen\\r\\n- Nuestra implementaci\xf3n de Drone, si bien utiliza las herramientas provistas\\r\\npor [Harness](https://harness.io) y la comunidad (`Drone Server`, `Drone Runner`,\\r\\n`Drone Autoscaler`, `Drone CLI`, etc), nos da mucha libertad al momento de personalizar\\r\\nla experiencia\\r\\n\\r\\n### Contras\\r\\n\\r\\n- No permite reutilizar variables en los _pipelines_\\r\\n- Tiene pocas herramientas para optimizar las tareas que se ejecutan (fuera de crear im\xe1genes docker)\\r\\n- De acuerdo a la licencia del mismo Drone, ya estamos fuera de la\\r\\nCommunity Edition. Si decidi\xe9ramos quedarnos con esta herramienta, corresponder\xeda\\r\\npagarla\\r\\n- El flujo de trabajo supone la existencia de ramas y fricciona bastante el desarrollo,\\r\\noblig\xe1ndonos a crear diferentes versiones del c\xf3digo y exponi\xe9ndonos a potenciales\\r\\nconflictos\\r\\n- Para llegar a producci\xf3n, tenemos que pasar dos veces por el proceso de aseguramiento de calidad\\r\\n- Dado que los runners est\xe1n desplegados por nosotros en nuestra nube de AWS, decidimos implementar\\r\\nel `Drone Autoscaler`, que ofrece la posibilidad de arrancar nuevas m\xe1quinas en la medida que son\\r\\nnecesarias. El tiempo que se toma Drone en desplegar m\xe1quinas y luego ejecutar el _pipeline_ en algunos\\r\\ncasos sobrepasaba los 10 minutos, estimamos que es demasiado\\r\\n\\r\\n### Por qu\xe9 queremos cambiar\\r\\n\\r\\nSi bien nuestro flujo de trabajo es bastante natural y fluido, creemos que podemos llevarlo al siguiente\\r\\nnivel. Adem\xe1s, si bien el Drone tiene muchas bondades, sus limitaciones nos est\xe1n pesando un poco.\\r\\n\\r\\n## Feature toggles: Despliegue !== Release\\r\\n\\r\\nNuestro flujo de trabajo contempla el despliegue frecuente a producci\xf3n\\r\\npero esto no siempre quiere decir que la funcionalidad est\xe1 disponible\\r\\npara ser utilizada.\\r\\n\\r\\nEl release, el momento en que se libera la funcionalidad a los usuarios,\\r\\nest\xe1 asociado a nuestros _feature toggles_ y la forma en que estos son\\r\\nliberados para su uso puede variar de acuerdo a decisiones de negocio. Un\\r\\ncliente puede contar con una funcionalidad y otro, no; un usuario puede\\r\\ntener acceso a una funcionalidad que est\xe1 en proceso de desarrollo; un pa\xeds\\r\\npuede contar con una funcionalidad que otro pa\xeds no; y as\xed.\\r\\n\\r\\nEsto implica que tenemos que acostumbrarnos a la idea de que en nuestro\\r\\nsoftware productivo conviven funcionalidades que est\xe1n disponibles con otras\\r\\nque no lo est\xe1n. Tienen en com\xfan que todas deben cumplir con nuestro est\xe1ndar de trabajo,\\r\\nacuerdos de equipo y contar con test automatizados que nos dan la tranquilidad\\r\\nde que, cuando est\xe9n activos, funcionar\xe1n correctamente.\\r\\n\\r\\n## Flujos de trabajo ideal\\r\\n\\r\\n![workflow](./workflow.png)\\r\\n\\r\\nLuego de reflexionar, acordamos agregar m\xe1s posibilidades para que el proceso\\r\\nde desarrollo sea m\xe1s corto: eliminar la necesidad de contar con una rama\\r\\ny poder trabajar directamente con la rama principal de cada repositorio.\\r\\n\\r\\nDise\xf1amos tres alternativas:\\r\\n\\r\\n- Al empujar cambios en la rama principal, nuestro sistema de integraci\xf3n/despliegue continuo\\r\\ntomar\xe1 esa versi\xf3n del c\xf3digo, asegurar\xe1 calidad y desplegar\xe1 en producci\xf3n\\r\\n- Al crear un _merge request_, solo asegurar\xe1 calidad\\r\\n- Al empujar un _tag_ que incluya la palabra `hotfix`, tomar\xe1 esos cambios, los someter\xe1 al\\r\\nproceso de aseguramiento de calidad y desplegar\xe1 los cambios en producci\xf3n\\r\\n\\r\\nQueremos que el primero de los escenarios sea el m\xe1s com\xfan, pero sabemos que existen algunas\\r\\nsituaciones en las que una rama ser\xe1 el camino, por eso mantendremos el segundo flujo de trabajo.\\r\\n\\r\\nEl tercero es para situaciones a\xfan m\xe1s excepcionales, en las que por alg\xfan _bug_ sea necesario\\r\\npasar por encima de la \xfaltima versi\xf3n del c\xf3digo que est\xe1 en la rama principal y llegar a producci\xf3n.\\r\\n\\r\\nAhora se nos viene un proceso de investigaci\xf3n que nos ayude a definir qu\xe9 herramientas\\r\\nqueremos utilizar para automatizar este proceso. Ya les iremos contando."},{"id":"how-to-build-a-test","metadata":{"permalink":"/blog/how-to-build-a-test","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-28-how-to-test/index.md","source":"@site/blog/2022-09-28-how-to-test/index.md","title":"C\xf3mo construir un test","description":"En Lendaas trabajamos con TDD (o lo intentamos \ud83e\udd13), aqu\xed puedes leer un poco m\xe1s acerca","date":"2022-09-28T00:00:00.000Z","formattedDate":"28 de septiembre de 2022","tags":[{"label":"gu\xedas","permalink":"/blog/tags/guias"},{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":4.24,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"C\xf3mo construir un test","slug":"how-to-build-a-test","authors":"benja","tags":["gu\xedas","testing"]},"prevItem":{"title":"Flujo de trabajo de Lendaas","permalink":"/blog/lendaas-workflow"},"nextItem":{"title":"Retroalimentaci\xf3n entre pares","permalink":"/blog/peer-feedback"}},"content":"En Lendaas trabajamos con TDD (o lo intentamos \ud83e\udd13), [aqu\xed](blog/testing-101) puedes leer un poco m\xe1s acerca\\r\\nde nuestra estrategia global. Suena bonito, pero en la pr\xe1ctica\\r\\nescribir test de distintas naturalezas antes de codear no es tan\\r\\nsencillo.\\r\\n\\r\\nEn este art\xedculo abordar\xe9 de forma m\xe1s concreta distintos\\r\\nescenarios cotidianos a los que nos enfrentamos y c\xf3mo resolvemos\\r\\nel test en cada uno.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Qu\xe9 entendemos por un test\\r\\n\\r\\nUn test ser\xeda un caso de prueba que tiene ciertas caracter\xedsticas:\\r\\n\\r\\n- Tiene un nombre o descripci\xf3n que normalmente escribimos en ingl\xe9s\\r\\ne incluye la palabra _should_ (deber\xeda). Cualquiera deber\xeda poder leerlo\\r\\ny entender la expectativa del test\\r\\n- Cada test es una unidad independiente, puedo ejecutarlo por s\xed solo\\r\\ny siempre debiera obtener el mismo resultado. En otras palabras, no deber\xeda\\r\\nexistir dependencia entre mi test y el anterior\\r\\n- El resultado del test siempre debiera ser un `booleano`, un sem\xe1foro que solo\\r\\ntiene luz verde o roja (\ud83d\udfe2 / \ud83d\udd34)\\r\\n\\r\\n:::info tip\\r\\n\\r\\nEn algunas ocasiones traicionamos un poco la rep\xfablica independiente de cada test,\\r\\nagrupando casos de prueba que comparten estrechamente un contexto. Para esto\\r\\nusamos un _describe_ y describimos las coordenadas espec\xedficas que los une.\\r\\n\\r\\n:::\\r\\n\\r\\n## Partes de un test\\r\\n\\r\\nCada test tiene una estructura de tres partes:\\r\\n\\r\\n1. __Arrange__: en esta etapa configuro todo lo necesario para que mi test pueda\\r\\nejecutarse. \xbfNecesito construir alg\xfan objeto? \xbfNecesito reemplazar alguna\\r\\ndependencia? \xbfNecesito que haya algo previamente en la base de datos?\\r\\n2. __Act__: aqu\xed ejecuto. Hago alguna acci\xf3n que desencadene un cambio\\r\\nen el estado observable del software. Puede ser que ejecute una petici\xf3n http\\r\\ncontra una API o simplemente ejecute un m\xe9todo\\r\\n3. __Assert__: ahora verifico el resultado. Esta etapa es la que determina si el test\\r\\narroja un resultado positivo o falla\\r\\n\\r\\nA tener en cuenta:\\r\\n\\r\\n- Recomiendo siempre comenzar por la descripci\xf3n del test\\r\\n- Explicitar las tres secciones suele ayudarme a tener consciencia de\\r\\nqu\xe9 / por qu\xe9 estoy haciendo algo. Suelo dejar como comentario las tres secciones\\r\\ndel test, incluso aunque pueda prescindir de una de ellas\\r\\n- Mantener el orden y s\xedntesis es clave para que otro distinto de m\xed pueda\\r\\nentender r\xe1pidamente de qu\xe9 trata el test\\r\\n- A veces, sobre todo cuando hay `mocks`, es posible que un `assert` quede anidado\\r\\ndentro del `arrange`. No es deseable, pero si no lo puedo evitar, dejo un comentario expl\xedcitando este anti patr\xf3n\\r\\n\\r\\n## Ejemplos pr\xe1cticos\\r\\n\\r\\n### Test Unitario\\r\\n\\r\\n#### Caso simple\\r\\n\\r\\nSupongamos que tenemos el siguiente m\xe9todo:\\r\\n\\r\\n``` js\\r\\n// math.js\\r\\nexport const sum = numbers => {\\r\\n  return numbers.reduce((total, current) => {\\r\\n    return total + current;\\r\\n  }, 0);\\r\\n};\\r\\n```\\r\\n\\r\\nUn test sencillo ser\xeda algo as\xed:\\r\\n\\r\\n``` js\\r\\n// math.spec.js\\r\\nimport { sum } from \'./math.js\';\\r\\n\\r\\ntest(\'should sum int numbers\', () => {\\r\\n  // ARRANGE\\r\\n  // Construyo el input que necesito para mi test\\r\\n  const numbers = [1, 2, 3];\\r\\n  // ACT\\r\\n  // Ejecuto la funci\xf3n y le entrego el argumento\\r\\n  const result = sum(numbers);\\r\\n  // ASSERT\\r\\n  // Reviso que el resultado sea 6\\r\\n  expect(result).toBe(6);\\r\\n});\\r\\n```\\r\\n\\r\\n#### Un poco m\xe1s sofisticado\\r\\n\\r\\nSupongamos que queremos interactuar con la [api de Star Wars](https://swapi.dev/)\\r\\ny obtener personajes:\\r\\n\\r\\n``` js\\r\\n// api.js\\r\\nconst axios = require(\'axios\');\\r\\n\\r\\n/**\\r\\n * Obtiene personajes desde la api de StarWars\\r\\n * @param page    N\xfamero de p\xe1gina\\r\\n * @returns       Objeto, la llave results contiene el arreglo de personajes\\r\\n */\\r\\nconst getCharacters = async (page = undefined) => {\\r\\n  const params = { page };\\r\\n  try {\\r\\n    const { data } = await axios.get(\\r\\n      `${process.env.SWAPI_BASE_URL}/people`,\\r\\n      { params }\\r\\n    );\\r\\n    return data;\\r\\n  } catch (error) {\\r\\n    throw new Error(\'Error fetching characters\');\\r\\n  }\\r\\n};\\r\\n```\\r\\n\\r\\nDado que el objetivo del test unitario es revisar que mis l\xedneas de c\xf3digo hacen\\r\\nlo que quiero que haga y de que no quiero sobrecargar de llamadas a la api,\\r\\ntengo que construir un __mock__ (sustituto) de `axios`:\\r\\n\\r\\n``` js\\r\\nconst axios = require(\'axios\');\\r\\nconst { getCharacters } = require(\'./api\');\\r\\n\\r\\ndescribe(\'./api.js\', () => {\\r\\n  beforeEach(() => {\\r\\n    // para asegurar que el entorno de cada test sea \xfanico\\r\\n    process.env = {};\\r\\n  });\\r\\n\\r\\n  it(\'should get characters\', async () => {\\r\\n    // ARRANGE\\r\\n    process.env.SWAPI_BASE_URL = \'swapi_url\';\\r\\n    const axiosGetMock = jest.spyOn(axios, \'get\')\\r\\n      .mockImplementationOnce(async () => ({ data: \'data\' }));\\r\\n\\r\\n    // ACT\\r\\n    const characters = await getCharacters();\\r\\n\\r\\n    // ASSERT\\r\\n    expect(characters).toBe(\'data\');\\r\\n    expect(axiosGetMock).toHaveBeenCalledWith(\\r\\n      \'swapi_url/people\',\\r\\n      { params: { page: undefined } }\\r\\n    );\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\n:::info\\r\\n\\r\\nTal como coment\xe9 en [este](blog/testing-101#b1-unitarios) art\xedculo que\\r\\nintroduce los tipos de test, los unitarios persiguen la idea de probar\\r\\nexclusivamente MIS l\xedneas de c\xf3digo. Hacer __mocks__ a veces no parece\\r\\nnecesario, pero es la herramienta que nos permite aislar cualquier comportamiento\\r\\najeno y as\xed, concentrarme exclusivamente en lo que me interesa.\\r\\n\\r\\n:::\\r\\n\\r\\n### Test de integraci\xf3n\\r\\n\\r\\nUn test de integraci\xf3n prueba los distintos componentes de una soluci\xf3n interactuando entre s\xed.\\r\\nEn este tipo de tests no se utilizan mocks de los componentes externos.\\r\\nPor el contrario, estos tests se hacen en un ambiente similar al que utilizar\xedan si el software estuviera desplegado.\\r\\nEsto significa que necesitamos contar con bases de datos, y desplegar todos los recursos de los que dependa lo que queremos testear."},{"id":"peer-feedback","metadata":{"permalink":"/blog/peer-feedback","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-20-peer-feedback/index.md","source":"@site/blog/2022-09-20-peer-feedback/index.md","title":"Retroalimentaci\xf3n entre pares","description":"annual performance review","date":"2022-09-20T00:00:00.000Z","formattedDate":"20 de septiembre de 2022","tags":[{"label":"gu\xedas","permalink":"/blog/tags/guias"},{"label":"cultura","permalink":"/blog/tags/cultura"}],"readingTime":1.465,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Retroalimentaci\xf3n entre pares","slug":"peer-feedback","authors":"benja","tags":["gu\xedas","cultura"]},"prevItem":{"title":"C\xf3mo construir un test","permalink":"/blog/how-to-build-a-test"},"nextItem":{"title":"Pair Programming","permalink":"/blog/pair-programming"}},"content":"![annual performance review](./annual-performarnce-review.jpeg)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Por qu\xe9 retroalimentar \ud83e\udd17\\r\\n\\r\\n- Mejora la confianza y el clima de trabajo\\r\\n- Potencia el crecimiento personal y profesional\\r\\n- Da a conocer a otros las expectativas que tengo ellos y puedo conocer las que otros tienen de m\xed\\r\\n\\r\\n## Reglas del juego \ud83c\udfb2\\r\\n\\r\\n- Agendar con al menos una semana de anticipaci\xf3n, no m\xe1s de 1 ~ 1,5 hrs.\\r\\n- Preparar responsablemente la reuni\xf3n para que la retroalimentaci\xf3n sea significativa y no improvisada\\r\\n- Idealmente presencial (lugar relajado, fuera de la oficina) y siempre uno a uno\\r\\n- Confidencial y no vinculado con evaluaci\xf3n formal de desempe\xf1o\\r\\n- Rec\xedproco, ambos retroalimentan\\r\\n- Ojal\xe1 hacer el ejercicio peri\xf3dicamente, tres o cuatro veces al a\xf1o\\r\\n- No necesariamente tiene que ser con el equipo/c\xe9lula de trabajo cotidiano, funciona igual con personas de otros equipos o \xe1reas\\r\\n\\r\\n## C\xf3mo retroalimentar \ud83e\uddb8\\r\\n\\r\\nConversaci\xf3n en base a tres preguntas gu\xedas, con \xe9nfasis general en c\xf3mo puedo ayudar al otro a ser mejor en su trabajo.\\r\\n\\r\\n1. Qu\xe9 creo que hace MUY bien\\r\\n2. Qu\xe9 creo que no hace tan bien y c\xf3mo creo que podr\xeda mejorar\\r\\n3. Qu\xe9 creo que hace bien, pero creo que podr\xeda hacer a\xfan mejor y c\xf3mo\\r\\n\\r\\n:::tip Nota\\r\\nPara m\xe1s informaci\xf3n, googlear: sandwich / hamburger feedback method.\\r\\n:::\\r\\n\\r\\n## Tips \ud83d\udca1\\r\\n\\r\\n- Aludir a situaciones espec\xedficas y concretas dando ejemplos, ojal\xe1 m\xe1s de uno\\r\\n- Tomar una actitud de apertura, tanto al retroalimentar como al recibir retroalimentaci\xf3n\\r\\n- Ofrecer un punto de vista personal y constructivo e intentar encontrar valor en ese mismo gesto que te ofrece el otro\\r\\n- Enfatizar que es personal y subjetivo: siento / veo / percibo que\u2026\\r\\n- Mantener el foco en la estructura de la sesi\xf3n y las preguntas gu\xedas"},{"id":"pair-programming","metadata":{"permalink":"/blog/pair-programming","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-19-pair-programming/index.md","source":"@site/blog/2022-09-19-pair-programming/index.md","title":"Pair Programming","description":"Programar entre dos no es tan dif\xedcil como parece. Aqu\xed algunas ideas para ponerlo en pr\xe1ctica.","date":"2022-09-19T00:00:00.000Z","formattedDate":"19 de septiembre de 2022","tags":[{"label":"gu\xedas","permalink":"/blog/tags/guias"},{"label":"cultura","permalink":"/blog/tags/cultura"}],"readingTime":3.72,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Pair Programming","slug":"pair-programming","authors":"benja","tags":["gu\xedas","cultura"]},"prevItem":{"title":"Retroalimentaci\xf3n entre pares","permalink":"/blog/peer-feedback"},"nextItem":{"title":"Refactor, \xbfqu\xe9 es y c\xf3mo enfrentarlo?","permalink":"/blog/refactoring-101"}},"content":"Programar entre dos no es tan dif\xedcil como parece. Aqu\xed algunas ideas para ponerlo en pr\xe1ctica.\\r\\n\\r\\n![pair programming](./pair-programming.png)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Qu\xe9 es \ud83d\udc6f\u200d\u2642\ufe0f\\r\\n\\r\\nComo su nombre lo dice: es una estrategia para escribir c\xf3digo entre dos personas.\\r\\n\\r\\n## Roles \ud83d\udc69\u200d\u2708\ufe0f\\r\\n\\r\\nDos personas, dos roles:\\r\\n\\r\\n- **Piloto / driver:** es quien tiene las manos en el\\r\\ntim\xf3n (teclado). Solo \xe9l ejecuta los cambios en el c\xf3digo. Si\\r\\nla sesi\xf3n es remota, comparte pantalla.\\r\\n- **Co-piloto / navigator:** compa\xf1ero de ruta, si bien\\r\\nno est\xe1 escribiendo c\xf3digo, sigue el proceso, suguiere,\\r\\ncomenta, debate. Su responsabilidad es mirar el mapa,\\r\\ntener los ojos en la documentaci\xf3n, referentes, esquemas, acuerdos y simpre en el paso siguiente.\\r\\n\\r\\nLos roles se van intercambiando en cada bloque a lo largo de la sesi\xf3n.\\r\\n\\r\\n## Pomodoro \ud83c\udf45\\r\\n\\r\\n![pomodoro](./pomodoro.jpg)\\r\\n\\r\\nEs una t\xe9cnica para manejar foco en bloques cortos, su mec\xe1nica es simple:\\r\\n\\r\\n- Elige una tarea que estimen tome no m\xe1s de 20 minutos\\r\\n- Si no existe esa tarea: divide, muele, lil\xfaa, pica... hasta conseguirla\\r\\n- tarea (SMART): espec\xedfica, medible, asignable, realista, acotada en el tiempo\\r\\n- As\xedgnate la tarea en el artefacto que el equipo utilice para eso (Trello?)\\r\\n- Trabaja en la tarea por 25 minutos\\r\\n- Descanso de 5 minutos\\r\\n- Cambio de roles y repetir\\r\\n- Luego de cuatro o cinco bloques, el descanso ser\xe1 de 20 minutos\\r\\n\\r\\n:::info OJO\\r\\n\\r\\nPomodoro no es escrictamente necesario para programar entre pares, pero parece ser un\\r\\nmarco de trabajo que da buenos resultados. Pueden probar\\r\\nuna estrategia distinta, mi recomendaci\xf3n es que la definan,\\r\\nla dejen por escrito, la respeten y ojal\xe1 la eval\xfaen al final de la sesi\xf3n.\\r\\n\\r\\n:::\\r\\n\\r\\n## C\xf3mo funciona \ud83e\udd77\\r\\n\\r\\n- El copiloto inicia el cron\xf3metro, la alarma tiene sonar cuando sea que se cumpla el tiempo acordado\\r\\n- Ambos conversan, debaten, discuten acerca de qu\xe9 / c\xf3mo hacer para sacar adelante la tarea\\r\\n- Hallazgos: tratar de mantener el foco. Stopers o potenciales amenazas, anotarlas para atenderlas luego de terminada la tarea del bloque\\r\\n- Toda duda es leg\xedtima, aunque tome tiempo y haya que repetir\\r\\n- Suena la campana: cambio\\r\\n- Si alguien necesita una pausa corta: se toma [ambos paran, se detiene el tiempo]\\r\\n- Si la pausa es larga, dejar el trabajo hasta donde est\xe9 y volver a retomar apenas sea posible (o repensar la estrategia)\\r\\n- Si es necesario relativizar la duraci\xf3n de cada sesi\xf3n, adelante [ojal\xe1 no pase de 1,5 hrs.]\\r\\n- Lo ideal es conseguir que al finalizar el bloque, la tarea quede lista\\r\\n\\r\\n:::tip Nota\\r\\nClonar repositorios, cambiarse de rama, levantar contenedores docker... preparar ambiente local, idealmente debiera ocurrir previo a la sesi\xf3n.\\r\\nSi necesitas ayuda, p\xeddela y luego de conseguirlo, que comience la sesi\xf3n.\\r\\n:::\\r\\n\\r\\n:::info OJO\\r\\nDej\xe9 un link en las referencias sobre _strong-style pairing_, una\\r\\nvariante donde el _driver_ solo escribe lo que el _navigator_ le\\r\\ndice que escriba. Puede resultar interesante, lectura\\r\\nrecomendada.\\r\\n:::\\r\\n\\r\\n## Ventajas \ud83d\udc4d\\r\\n\\r\\n- Evita quedarse pegado en cosas chicas\\r\\n- Fomenta el aprendizaje e interacci\xf3n entre pares\\r\\n- Code review impl\xedcito, menor retrabajo\\r\\n- Aliviana el trabajo inter-equipo y refuerza el aprendizaje de nuevos integrantes\\r\\n- M\xe1s foco\\r\\n- Obliga a avanzar en base a acuerdos\\r\\n- Aumenta la calidad del c\xf3digo (dos cabezas piensan mejor que una)\\r\\n\\r\\n## Desventajas \ud83d\udc4e\\r\\n\\r\\n- Puede ser cansador, intenso\\r\\n- Puede ser invasivo (si alguien no quiere/puede, no deber\xeda ser un problema)\\r\\n- Quedarse pegado en algo puede ser frustrante, sobre todo cuando no hay un acuerdo claro\\r\\n- En t\xe9rminos de eficiencia y costo, puede parecer m\xe1s ineficiente y caro que trabajar por separado (muy debatible y digno de an\xe1lisis, pero es un punto a tener en consideraci\xf3n)\\r\\n\\r\\n## Herramientas \ud83c\udf92\\r\\n\\r\\n- Google Meet, oh s\xed\\r\\n- CoScreen: www.coscreen.co\\r\\n- CodeTogether: www.codetogether.com\\r\\n- Replit: www.replit.com (requiere login para compartir en vivo)\\r\\n- Live Share: <https://visualstudio.microsoft.com/services/live-share/>\\r\\n- Live Share en el Browser: <https://docs.microsoft.com/en-us/visualstudio/liveshare/quickstart/browser-join>\\r\\n\\r\\n:::tip Bonus track\\r\\n\\r\\n- Al finalizar un d\xeda de mucho pair-programming, entregar feedback acerca de la experiencia\\r\\n- Analizar qu\xe9 funcion\xf3, qu\xe9 podr\xeda funcionar mejor y c\xf3mo\\r\\n- Qu\xe9 hizo muy bien el otro, qu\xe9 podr\xeda hacer mejor\\r\\n- Ejemplos:\\r\\n  - Hiciste buenas preguntas\\r\\n  - Podr\xedamos haber rotado m\xe1s\\r\\n  - Mantuviste el foco a pesar de...\\r\\n  - etc\\r\\n- Si quieres saber m\xe1s acerca de c\xf3mo retroalimentar, visita la secci\xf3n de [Retroalimentaci\xf3n entre Pares](blog/peer-feedback)\\r\\n\\r\\n:::\\r\\n\\r\\n## Referencias \ud83d\udcda\\r\\n\\r\\n- [Martin Fowler - Pair Programming](https://martinfowler.com/articles/on-pair-programming.html)\\r\\n- [Recurse Center](https://www.recurse.com/manual#sec-pairing)\\r\\n- [Llewellyn Falco - Llewellyn\u2019s strong-style pairing](http://llewellynfalco.blogspot.com/2014/06/llewellyns-strong-style-pairing.html)\\r\\n- [CoScreen - Pair programming tag](https://www.coscreen.co/blog/tag/pair-programming/)"},{"id":"refactoring-101","metadata":{"permalink":"/blog/refactoring-101","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-19-refactoring-101/index.md","source":"@site/blog/2022-09-19-refactoring-101/index.md","title":"Refactor, \xbfqu\xe9 es y c\xf3mo enfrentarlo?","description":"Martin Fowler tiene un libro completo sobre esto, pens\xe9","date":"2022-09-19T00:00:00.000Z","formattedDate":"19 de septiembre de 2022","tags":[{"label":"testing","permalink":"/blog/tags/testing"},{"label":"guias","permalink":"/blog/tags/guias"},{"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":5.165,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Refactor, \xbfqu\xe9 es y c\xf3mo enfrentarlo?","authors":["benja"],"slug":"refactoring-101","tags":["testing","guias","programming"]},"prevItem":{"title":"Pair Programming","permalink":"/blog/pair-programming"},"nextItem":{"title":"\xbfPor qu\xe9 usamos un design-system?","permalink":"/blog/por-que-design-system"}},"content":"[Martin Fowler](https://martinfowler.com/) tiene un [libro completo sobre esto](https://www.martinfowler.com/books/refactoring.html), pens\xe9\\r\\nque ser\xeda una buena idea al menos tener un art\xedculo que introduzca el t\xf3pico.\\r\\n\\r\\n![refactor](./code-refactoring.jpg)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Qu\xe9 es \ud83d\ude49\\r\\n\\r\\n[Parafraseando a _Fowler_](https://martinfowler.com/bliki/DefinitionOfRefactoring.html),\\r\\ngeneralmente habr\xeda dos maneras de entenderlo:\\r\\n\\r\\n1. __Refactor__, como sustantivo (concepto)\\r\\n\\r\\n    > Es un cambio a la estructura interna del software que lo hace m\xe1s f\xe1cil de entender y\\r\\n    > simplifica su posterior modificaci\xf3n, pero sin alterar su comportamiento observable.\\r\\n\\r\\n2. __Refactorizar__ como verbo (actividad)\\r\\n\\r\\n    > Ser\xeda la actividad de aplicar estos cambios (conocidos como refactorizaciones) que\\r\\n    > mejoran el dise\xf1o / la soluci\xf3n.\\r\\n\\r\\nY yendo m\xe1s all\xe1, tambi\xe9n podemos entender al refactor como una habilidad,\\r\\nque se adquiere con la experiencia\\r\\nde refactorizar. Una que como desarrolladores queremos tener.\\r\\n\\r\\n## Por qu\xe9 refactorizar \u2603\ufe0f\\r\\n\\r\\n![code quality](https://imgs.xkcd.com/comics/code_quality.png)\\r\\n\\r\\nEs medio majadero, porque la misma defici\xf3n de Fowler lo explica, pero quer\xeda detenerme en el porqu\xe9.\\r\\nRefactorizamos por una serie de razones, intentar\xe9 nombrar algunas de ellas:\\r\\n\\r\\n- Porque trabajamos con TDD, es parte de nuestro flujo de trabajo\\r\\n- Porque intentamos mantener patrones ordenados en nuestras piezas\\r\\n- Porque intentamos evitar la deuda t\xe9cnica\\r\\n- Porque que el c\xf3digo sea entendible y mantenible son argumentos que valoramos\\r\\n\\r\\nMantener el refactor como pr\xe1ctica cotidiana nos ayuda a mantener un buen est\xe1ndar de calidad. Refactorizar es parte de nuestra cultura: invertimos en\\r\\nmejorar constantemente la calidad.\\r\\n\\r\\n## La mentira del gran refactor \ud83d\ude4a\\r\\n\\r\\nUn refactor nunca ser\xe1 una mejora en s\xed mismo. La misma definici\xf3n, nuevamente, lo dice: \\"sin alterar\\r\\nsu comportamiento observable\\". Por lo tanto es evidente que el refactor se trata de la forma, del c\xf3mo, pero nunca\\r\\ndel qu\xe9. El funcionamiento del software se mantiene. Siempre ser\xe1 del \xe1mbito del __output__ (una mejora visible para\\r\\nel equipo) y no del __outcome__ (una nueva capacidad, caracter\xedstica o experiencia para el usuario o cliente).\\r\\n\\r\\nPor lo mismo, es natural que nuestra metodolog\xeda jam\xe1s considere que al refactor como un ciudadano (\xedtem) leg\xedtimo del backlog.\\r\\nSi un equipo quisiera usar su sprint para refactorizar, claro que puede hacerlo, el equpo es aut\xf3nomo. Pero esa decisi\xf3n\\r\\nevidentemente tiene costos:\\r\\n\\r\\n- Impacta negativamente en el cycle time (tiempo que se toma el equipo en liberar un feature)\\r\\n- No acciona la prioridad establecida por el product owner\\r\\n- Es un sprint de __output__ y sin __outcome__\\r\\n\\r\\nDe ah\xed la real importancia del refactor cotidiano: debiera ayudarnos\\r\\na evitar un nivel de deuda t\xe9cnica que cree esa distancia entre el\\r\\nincremento actual y el futuro. Incrementos futuros siempre debieran\\r\\nser accionables sin un __Gran Refactor__.\\r\\n\\r\\n## C\xf3mo aprender a refactorizar \ud83e\uddd1\u200d\ud83c\udfeb\\r\\n\\r\\nEs una habilidad pr\xe1ctica, se aprende y mejora con, adivinen. Exacto: pr\xe1ctica.\\r\\n\\r\\nAlgunas ideas:\\r\\n\\r\\n### Pedir feedback\\r\\n\\r\\nPuede ser pedir ayuda a quien creas que pueda tener alguna idea\\r\\ncr\xedtica acerca de c\xf3mo mejorar una pieza de c\xf3digo o puedes pedir un _code-review_, nunca falla.\\r\\n\\r\\n### Pair programming\\r\\n\\r\\nDos cabeza piensan mejor que una, siempre ser\xe1 una experiencia\\r\\nenriquecedora trabajar con otro. Puedes consultar [este art\xedculo](blog/pair-programming)\\r\\ncon m\xe1s informaci\xf3n acerca de c\xf3mo nos acercamos a esta pr\xe1ctica.\\r\\n\\r\\n### Estudiar y leer\\r\\n\\r\\nAdem\xe1s de leer libros acerca del tema, siempre es sano mantenerse al d\xeda de las nuevas mejoras que\\r\\ntrae EcmaScript, leer acerca de patrones de dise\xf1o que podr\xedan implementarse\\r\\npara mejorar nuestro producto y estar en contacto con la industria.\\r\\n\\r\\n### Practicar\\r\\n\\r\\nComo toda habilidad pr\xe1ctica, hay que practicarla. Recomiendo la cuenta\\r\\nde [GitHub de Emily Bache](https://github.com/emilybache), ella se dedica a hacer consultor\xeda y coaching\\r\\nacerca de estos temas y comparte los ejercicios que utiliza en\\r\\nsus consultor\xedas: el c\xf3digo en una tremenda cantidad de lenguajes,\\r\\nuna peque\xf1a bater\xeda de test y un readme que te puede orientar\\r\\nen algunas alternativas de refactor. Adem\xe1s, puedes encontrar las\\r\\n\\"soluciones\\" que otros dieron al problema en forma de c\xf3digo ya refactorizado. Muy recomendado.\\r\\n\\r\\n### Programaci\xf3n en equipo / mob-programming\\r\\n\\r\\nEnfrentar un refactor como equipo o con un colectivo puede ser muy enriquecedor\\r\\npara todos. Muchas veces se pueden combinar algunas sesiones colectivas\\r\\npara las operaciones m\xe1s delicadas y luego abordar el resto con `pair programming`\\r\\no como parte de un sprint.\\r\\n\\r\\n## Refactorizando en situaciones inc\xf3modas\\r\\n\\r\\nImagina que est\xe1s en algo as\xed:\\r\\n\\r\\n- Trabajando con c\xf3digo que otra persona escribi\xf3, sobre un dominio que no manejas\\r\\n- Podr\xeda ser c\xf3digo legado\\r\\n- C\xf3digo complicado\\r\\n- Larga extensi\xf3n\\r\\n- No testeado\\r\\n\\r\\nEn estos casos, antes de decidir hacia donde dirigirse, la primera\\r\\nprioridad es escribir algunos test: ojal\xe1 documentar r\xe1pidamente al menos las\\r\\nfuncionalidades que el c\xf3digo ofrece (o debiera ofrecer). En este proceso\\r\\nes muy probable que tropieces con bugs que nadie document\xf3 antes y que el\\r\\ncamino tienda a bifurcarse a otros lados.\\r\\n\\r\\nLuego de contar con una cantidad digna de test, puedes comenzar el refactor.\\r\\n\\r\\nSi el an\xe1lisis se vuelve a\xfan m\xe1s complicado, t\xe9cnicas como el [m\xe9todo](https://www.youtube.com/watch?v=nJSNpcXrPYU) [mikado](https://www.youtube.com/watch?v=qvlkyJ26PGc) podr\xedan ayudar a conceptualizar\\r\\nlos pasos necesarios para el refactor y planear una estrategia ganadora\\r\\ncomo equipo.\\r\\n\\r\\n## C\xf3mo refactorizar\\r\\n\\r\\n`TDD` son el mejor aliado del refactor, es crucial que para refactorizar tengamos un test que nos ayude a determinar\\r\\nc\xf3mo debe funcionar el c\xf3digo. Dado que no existir\xe1 un cambio observable, las suites de test funcionales debieran\\r\\nejecutarse correctamente previo al refactor y servir\xe1 para asegurar que el refactor no atent\xf3 contra el funcionamiento.\\r\\n\\r\\nAtenci\xf3n constante al detalle para evitar grandes refactors. Trabajo incremental, los cambios\\r\\ny giros estructurales que enfrenta el software debieran ocurrir de\\r\\nforma org\xe1nica, de la mano de TDD.\\r\\n\\r\\nComo dec\xeda: cuando no podemos tener una idea acerca de si es posible o no tomar un incremento del backlog,\\r\\nprobablemente nos falta refactor en nuestra cultura de desarrollo\\r\\n\\r\\n## Errores comunes\\r\\n\\r\\n- Intentar hacer demasiado: mant\xe9n los cambios en su m\xednima expresi\xf3n\\r\\n(_baby steps_)\\r\\n- No tengas miedo de volver atr\xe1s\\r\\n- Evita las ramas (sobre todo m\xe1s de una semana), en organizaciones\\r\\ndin\xe1micas puede ser muy dif\xedcil resolver los conflictos con la rama principal\\r\\n- El refactor debiera ser una actividad colectiva: com\xe9ntalo con tu equipo,\\r\\ncom\xe9ntalo con el equipo completo, transpar\xe9ntalo, comparte la estrategia,\\r\\ninvita a otro a acompa\xf1arte en el refactor, etc\\r\\n\\r\\n## Code smells\\r\\n\\r\\nComo dice Kent Beck y parafrasea Martin Fowler, existen ciertas\\r\\npistas que nos van a ayudar a determinar hacia d\xf3nde puede\\r\\nmejorarse el c\xf3digo"},{"id":"por-que-design-system","metadata":{"permalink":"/blog/por-que-design-system","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-15-por-que-design-system/index.md","source":"@site/blog/2022-09-15-por-que-design-system/index.md","title":"\xbfPor qu\xe9 usamos un design-system?","description":"tdd bdd & ddd","date":"2022-09-15T00:00:00.000Z","formattedDate":"15 de septiembre de 2022","tags":[{"label":"ux/ui","permalink":"/blog/tags/ux-ui"},{"label":"guias","permalink":"/blog/tags/guias"}],"readingTime":2.415,"hasTruncateMarker":true,"authors":[{"name":"Thomas Convain","title":"Desarrollador","url":"https://github.com/endiliey","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/7199430/avatar.png?width=400","key":"thomas"}],"frontMatter":{"slug":"por-que-design-system","title":"\xbfPor qu\xe9 usamos un design-system?","authors":["thomas"],"image":"./design-system.png","tags":["ux/ui","guias"]},"prevItem":{"title":"Refactor, \xbfqu\xe9 es y c\xf3mo enfrentarlo?","permalink":"/blog/refactoring-101"},"nextItem":{"title":"Introducci\xf3n al testing","permalink":"/blog/testing-101"}},"content":"![tdd bdd & ddd](./design-system.png)\\r\\n\\r\\n\xbfQu\xe9 es un design-system? \xbfPor qu\xe9 se vuelve relevante para Lendaas? \xbfC\xf3mo se implementa con nuestra metodolog\xeda?\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \xbfQu\xe9 es un design-system?\\r\\n\\r\\nEl **design-system** es una infraestructura que nos permite garantizar la unidad y calidad de nuestro dise\xf1o. Se trata de una librer\xeda de componentes gr\xe1ficos que se usan en todas las interfaces de nuestras aplicaciones.\\r\\nLos componentes publicados en esta librer\xeda pueden ser exportados y usados en todos nuestros proyectos front. Los podemos usar tanto para prototipos en Figma c\xf3mo componentes en nuestro c\xf3digo.\\r\\n\\r\\n:::info Atomic-design\\r\\nEl design-system es nuestra \xfanica fuente de la verdad en cuanto a dise\xf1o. Se basa en el concepto de atomic-design, es decir un sistema de dise\xf1o escalable que parte de lo m\xe1s chico (atomos) a lo m\xe1s grande (P\xe1ginas).\\r\\n\\r\\n![tdd bdd & ddd](./atomic-design.jpg)\\r\\n*Para saber m\xe1s sobre atomic-design: <https://bradfrost.com/blog/post/atomic-web-design/>*\\r\\n:::\\r\\n\\r\\n## \xbfPor qu\xe9 se vuelve relevante para Lendaas?\\r\\n\\r\\nEn Lendaas trabajamos m\xe1s de 30 desarrolladores en distintas partes de nuestras aplicaciones. Con un n\xfamero de personas tan importante, resguardar la calidad del dise\xf1o y evitar c\xf3digo duplicado se vuelve un desaf\xedo muy complejo.\\r\\n\\r\\n:::danger Problemas al no usar un design-system\\r\\n\\r\\n- Componentes duplicados en varios lados del c\xf3digo.\\r\\n- Componentes cumpliendo funcionalidades similares pero con dise\xf1os distintos, afectando la imagen de la marca.\\r\\n- Actualizar/refactorizar componentes se vuelve muy engorroso.\\r\\n- No todos nuestros desarrolladores tienen habilidades para dise\xf1ar o quieren pasar mucho tiempo en ello.\\r\\n:::\\r\\n\\r\\nEl design-system permite tener un lugar com\xfan para todos los desarrolladores, mejora la comunicaci\xf3n e incrementa significativamente la velocidad de desorrollo. Nuestro producto se vuelve m\xe1s escalable y consistente, podemos dedicar m\xe1s tiempo a perfeccionar la experiencia de usuario.\\r\\n\\r\\n## \xbfC\xf3mo se implementa con nuestro proceso de dise\xf1o?\\r\\n\\r\\nEn Lendaas no tenemos equipos dedicados unicamente al dise\xf1o. Consideramos que cada desarrolador es responsable de la mantenci\xf3n y construcci\xf3n de nuestro design-system.\\r\\n\\r\\nParte de nuestros acuerdos en Lendaas es preparar prototipos navegables de nuestras interfaces que podamos testear con nuestros clientes antes de comenzar cualquier desarrollo.\\r\\n\\r\\nNuestro tooling de dise\xf1o contempla 2 herramientas complementarias: **Figma** y **Storybook**.\\r\\n\\r\\n:::tip Metodolog\xeda de dise\xf1o\\r\\n\\r\\n- Creamos todos los componentes nuevos con todas sus variables primero en el c\xf3digo.\\r\\n- Exportamos los componentes que se hayan creados a Figma. Figma propone una integraci\xf3n directa con Storybook. Puedes leer m\xe1s al respecto por [ac\xe1](https://help.figma.com/hc/en-us/articles/360045003494-Storybook-and-Figma).\\r\\n- Dise\xf1amos los prototipos navegables en Figma y se desarollan usando el mismo design-system.\\r\\n\\r\\n![tdd bdd & ddd](./storybook-to-figma.jpg)\\r\\n:::\\r\\n\\r\\n## Recapitulando\\r\\n\\r\\n- Un design-system es fundamental para resguardar consistencia y calidad del dise\xf1o/c\xf3digo.\\r\\n- Mejora la eficiencia de los equipos y disminuya fricciones que tengan que ver con el dise\xf1o.\\r\\n- Se integra en todas las etapas de construcci\xf3n de una experiencia de usuario.\\r\\n\\r\\nLos costos de implementaci\xf3n de un design-system pueden ser algo duros al principio. Requiere bastante trabajo previo, acuerdos de equipo y disciplina. A\xfan asi los beneficios a largo plazo deber\xedan ser importantes."},{"id":"testing-101","metadata":{"permalink":"/blog/testing-101","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-15-testing-101/index.md","source":"@site/blog/2022-09-15-testing-101/index.md","title":"Introducci\xf3n al testing","description":"Qu\xe9 entendemos por testing y por qu\xe9 es parte de nuestra cultura.","date":"2022-09-15T00:00:00.000Z","formattedDate":"15 de septiembre de 2022","tags":[{"label":"testing","permalink":"/blog/tags/testing"},{"label":"guias","permalink":"/blog/tags/guias"}],"readingTime":4.445,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"slug":"testing-101","title":"Introducci\xf3n al testing","authors":["benja"],"tags":["testing","guias"]},"prevItem":{"title":"\xbfPor qu\xe9 usamos un design-system?","permalink":"/blog/por-que-design-system"},"nextItem":{"title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","permalink":"/blog/2022/09/13/tdd-bdd-ddd"}},"content":"Qu\xe9 entendemos por `testing` y por qu\xe9 es parte de nuestra cultura.\\r\\n\\r\\n![testing](./assets/unit-test-eg.png)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Qu\xe9 es \ud83e\udd28\\r\\n\\r\\nEntendemos por `testing` o `software testing` a la coordinaci\xf3n de estrategias que nos permiten asegurar que el software hace lo queremos que haga (o no hace lo que no queremos).\\r\\n\\r\\n## Por qu\xe9 testeamos \ud83e\udd14\\r\\n\\r\\nLos `test` al servicio del dise\xf1o de software son una poderosa herramienta para orientar nuestro desarrollo al objetivo que persigue: crear una funcionalidad,\\r\\nofrecer cierto beneficio a un cliente, dar cumplimiento a una normativa o comportarse de cierta forma ante condiciones espec\xedficas.\\r\\n\\r\\nContar con la capacidad de escribir un caso de prueba nos obliga a hacernos una serie de preguntas relevantes antes de empezar a escribir c\xf3digo productivo,\\r\\nreduce errores y mantiene el foco en el cliente/negocio.\\r\\n\\r\\nAdem\xe1s, nos permite:\\r\\n\\r\\n- Darle al desarrollador y/o al equipo de desarrollo confianza para desplegar el software\\r\\n- Transparentar al resto del equipo qu\xe9 es lo que esperamos que haga el software [documentaci\xf3n]\\r\\n- Permitir a otros modificar c\xf3digo descansando en los test como red de seguridad\\r\\n- Reducir el n\xfamero de incidencias en producci\xf3n\\r\\n- Ofrece retroalimentaci\xf3n r\xe1pida al desarrollador acerca del proceso mismo de desarrollar\\r\\n- Contar con una estrategia s\xf3lida de CI/CD (integraci\xf3n y despliegue continuo)\\r\\n- Dar cuenta de que se da cumplimiento a nuestros acuerdos t\xe9cnicos\\r\\n\\r\\n## BDD & DDD + TDD = \u2b50\\r\\n\\r\\nSon estrategias que nos ayudan a conceptualizar mejor la forma en que orientamos el desarrollo del software.\\r\\n\\r\\nDesarrollo basado/guiado/orientado/dirigido por...\\r\\n\\r\\n- `TDD` \u2192 `Test driven development`, test / pruebas\\r\\n- `BDD` \u2192 `Beheivior driven development`, comportamiento\\r\\n- `DDD` \u2192 `Domain driven design`, dominio\\r\\n\\r\\nSi bien son acercamientos conceptuales, de alto nivel, conseguir combinarlas optimiza el proceso de ensayo/error y mejora continua\\r\\nque ocurre (o debiera ocurrir) naturalmente cuando desarrollamos.\\r\\n\\r\\n[Aqu\xed](blog/tdd-bdd-ddd) puedes leer m\xe1s acerca de c\xf3mo abordar estas estrategias conjuntamente.\\r\\n\\r\\n## Tipos de test \ud83e\uddf0\\r\\n\\r\\n### A. Orientados al funcionamiento (`black-box`)\\r\\n\\r\\n![black box test](./assets/test-black-box.png)\\r\\n\\r\\nSon test que se ejecutan sin conocer la implementaci\xf3n de la soluci\xf3n, solo saben lo que debiera o no hacer el software en una situaci\xf3n particular. Suelen utilizarse para validar el funcionamiento, pero tambi\xe9n pueden implementarse para validar par\xe1metros globales, tipos de respuesta, est\xe1ndares de respuesta, etc.\\r\\n\\r\\n#### A.1. End-to-End\\r\\n\\r\\n![end-to-end test](./assets/test-end-to-end.png)\\r\\n\\r\\nEmulan la interacci\xf3n de un usuario final a trav\xe9s de todas las capas del software funcionando.\\r\\n\\r\\n:::info Consideraciones\\r\\n\\r\\n- Requieren una comprensi\xf3n profunda de los casos de uso y las necesidades del usuario\\r\\n- Si bien aparentan ser simples, orquestarlas no suele ser sencillo\\r\\n- Son m\xe1s lentas que otros tipos de test\\r\\n\\r\\n:::\\r\\n\\r\\n#### A.2. Integraci\xf3n\\r\\n\\r\\n![integration test](./assets/test-integration.png)\\r\\n\\r\\nPrueban el funcionamiento de uno o m\xe1s servicios en forma simult\xe1nea.\\r\\n\\r\\n:::info Consideraciones\\r\\n\\r\\n- Son muy importantes cuando se utiliza arquitectura distribuida\\r\\n- Hay bugs que aparecen a este nivel que no vamos a ser capaces de detectar con test unitarios\\r\\n- Al igual que los `end-to-end`, configurar este tipo de pruebas requieren comprender la arquitectura\\r\\n- Si bien no simulan la interacci\xf3n de un usuario, los casos de prueba s\xed debieran pretender verosimilitud\\r\\n\\r\\n:::\\r\\n\\r\\n#### A.3. Contratos\\r\\n\\r\\n![contract test](./assets/test-contract.png)\\r\\n\\r\\nPrueban los valores de entrada y salida los servicios.\\r\\n\\r\\n:::info Consideraciones\\r\\n\\r\\n- Se vuelven interesantes al trabajar con arquitectura distribuida\\r\\n- Permiten probar que las interfaces de entrada y salida de dos o m\xe1s servicios continuan siendo compatibles\\r\\n\\r\\n:::\\r\\n\\r\\n### B. Orientados al c\xf3digo (`white-box`)\\r\\n\\r\\n![white box test](./assets/test-white-box.png)\\r\\n\\r\\nAl contrario de los anteriores, estos test s\xed pueden pueden acceder al c\xf3digo mismo, a la implementaci\xf3n de la soluci\xf3n.\\r\\n\\r\\n#### B.1. Unitarios\\r\\n\\r\\n![unit test](./assets/test-unit.png)\\r\\n\\r\\nPrueban unidades de c\xf3digo en forma aislada. Nos permiten asegurar que nuestras l\xedneas de c\xf3digo hacen lo que esperamos que hagan quitando de la ecuaci\xf3n a las dependencias.\\r\\n\\r\\n:::info Consideraciones\\r\\n\\r\\n- Si existen dependencias, solemos usar un sustituto (`mock`) que permita sacar adelante el test\\r\\n- Si un mock es complicado, probablemente la soluci\xf3n no es tan buena: opoturnidad para mejorar responsabilidad/modularizaci\xf3n del c\xf3digo\\r\\n- Son \xfatiles para refactorizar functiones/m\xe9todos/clases largas\\r\\n- Requieren conocer tanto el framework utilizado como la herramienta que ejecuta los tests\\r\\n- Son tratados con el mismo cari\xf1o que el c\xf3digo productivo\\r\\n- Pro tip: probar la soluci\xf3n, lo que el c\xf3digo debiera hacer y no la implementaci\xf3n\\r\\n\\r\\n:::\\r\\n\\r\\n#### B.2. Mutaci\xf3n\\r\\n\\r\\n![mutation test](./assets/test-mutation.png)\\r\\n\\r\\nToman el c\xf3digo fuente y lo modifican, a cada modificaci\xf3n la llaman `mutante`, luego ejecutan la suite de test unitarios contra cada mutante. Si el test pasa, el mutante muere. Mientras menor sea la cantidad de mutantes sobrevivientes, mayor ser\xe1 la calidad de los test unitarios.\\r\\n\\r\\nSu objetivo es ayudarnos a mejorar la calidad del c\xf3digo y de sus test unitarios.\\r\\n\\r\\n:::info Consideraciones\\r\\n\\r\\n- A veces no es tan f\xe1cil comprender su funcionamiento\\r\\n- Es muy recomendable utilizarlos en dominios que requieran un trabajo detallista y orientado a casos de uso de alta especificidad\\r\\n- A veces no son tan efectivos: solemos depositar en capas del software medidas de seguridad que nos permiten deliberadamente no manejar algunos casos bordes y comprobaciones dentro del mismo software\\r\\n\\r\\n:::\\r\\n\\r\\n## Referencias\\r\\n\\r\\n- [Effective Software Testing / Maur\xedcio Aniche](https://livebook.manning.com/book/effective-software-testing/welcome/v-4/)\\r\\n- [Test that find bugs / Software Engineering Unlocked](https://www.software-engineering-unlocked.com/tests-find-bugs/)\\r\\n- [A guide to unit testing in JavaScript / Marc Mignonsin](https://github.com/mawrkus/js-unit-testing-guide)\\r\\n- [Jest Docs](https://jestjs.io/docs/getting-started)\\r\\n- [Testable JavaScript / Mark Ethan Trostler](https://www.oreilly.com/library/view/testable-javascript/9781449323516/ch04.html)\\r\\n- [The Practical Test Pyramid / Ham Vocke ft. Martin Fowler](https://martinfowler.com/articles/practical-test-pyramid.html)\\r\\n- [Clean Code / Robert Martin](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) ([en pdf](https://enos.itcollege.ee/~jpoial/oop/naited/Clean%20Code.pdf))"},{"id":"/2022/09/13/tdd-bdd-ddd","metadata":{"permalink":"/blog/2022/09/13/tdd-bdd-ddd","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-09-13-tdd-bdd-ddd/index.md","source":"@site/blog/2022-09-13-tdd-bdd-ddd/index.md","title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","description":"cat dev","date":"2022-09-13T00:00:00.000Z","formattedDate":"13 de septiembre de 2022","tags":[{"label":"testing","permalink":"/blog/tags/testing"},{"label":"guias","permalink":"/blog/tags/guias"}],"readingTime":6.375,"hasTruncateMarker":true,"authors":[{"name":"Benjam\xedn Roa","title":"Desarrollador","url":"https://gitlab.com/broa","imageURL":"https://trello-members.s3.amazonaws.com/5e95bc4f2bc4ae1ad51b9dda/301e1a568b2b6527600023094f223b46/50.png","key":"benja"}],"frontMatter":{"title":"Desarrollando con TDD, BDD, DDD \ud83e\udd72","authors":["benja"],"image":"./assets/cat-dev.jpg","tags":["testing","guias"]},"prevItem":{"title":"Introducci\xf3n al testing","permalink":"/blog/testing-101"}},"content":"![cat dev](./assets/cat-dev.jpg)\\r\\n\\r\\nPaseando un poco en Google, es muy f\xe1cil encontrar una tremenda cantidad de Gur\xfas que prometen\\r\\nmejorar tu forma de desarrollar. Lo m\xe1s probable es que existan tantas estrategias como personas en el planeta, y que cada uno deba experimentar hasta encontrar la propia.\\r\\n\\r\\nEn este art\xedculo explicar\xe9 c\xf3mo podr\xedan utilizarse `BDD` y `DDD` en conjunto con `TDD`. Puede ponerse medio arenoso el camino\\r\\ny no est\xe1 f\xe1cil encontrar el nivel de detalle/profundidad\\r\\nque debiera darle a cada arista, veamos qu\xe9 sale.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \xbfBEDEQU\xc9?\\r\\n\\r\\nPara comenzar, vamos a repasar r\xe1pidamente en qu\xe9 consisten estas maravillosas siglas. Tres metodolog\xedas:\\r\\n\\r\\n### [Test Driven Development (TDD) - 2003](https://en.wikipedia.org/wiki/Test-driven_development)\\r\\n\\r\\n[Kent Beck](https://www.kentbeck.com) nos propone un flujo de trabajo guiado por los test. Comienzas con un test, te aseguras\\r\\nde que falle (\ud83d\udd34); escribes el m\xednimo de l\xedneas de c\xf3digo necesario para satisfacerlo, te aseguras de que ahora el test pase (\ud83d\udfe2);\\r\\ny luego te preguntas c\xf3mo puedo ordenar/organizar/abstraer mejor la soluci\xf3n (refactor \ud83d\udc68\u200d\ud83c\udfed). Es un m\xe9todo incremental que pretende\\r\\nmejorar tus resultados oblig\xe1ndote a poner el objetivo (test) por delante de tus ganas de lanzarte a escribir c\xf3digo.\\r\\n\\r\\n### [Domain Driven Design (DDD) - 2004](https://www.amazon.com/-/es/Eric-Evans/dp/0321125215)\\r\\n\\r\\nErik Evans, por su lado, propone dejar el dominio al centro y crear un lenguaje com\xfan entre el software y el negocio que permita modelar\\r\\nmejor los problemas y fomente la colaboraci\xf3n entre los distintos actores\\r\\n([ubiquitous language](https://martinfowler.com/bliki/UbiquitousLanguage.html)), derribando las barreras entre lo t\xe9cnico\\r\\ny lo no-t\xe9cnico. La idea es mejorar la comunicaci\xf3n para poder alinear objetivos, flexibilizar, mejorar la calidad del c\xf3digo y\\r\\norientarlo siempre al negocio.\\r\\n\\r\\n### [Behaviour Driven Development (BDD) - 2011](https://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379)\\r\\n\\r\\n[Dan North](https://dannorth.net) en respuesta a TDD, propone que manteniendo sus principios, agreguemos una capa superior que\\r\\npermita dise\xf1ar la soluci\xf3n en base al comportamiento que un usuario debiera experimentar al interactuar con ella. Los objetivos\\r\\nestar\xedan definidos en t\xe9rminos de estas expectativas que el usuario tendr\xeda y se acordar\xedan con el Product Owner (PO) como criterios\\r\\nde aceptaci\xf3n. Para especificar estos acuerdos, propone el uso de `functional specifications` que vendr\xeda siendo un documento\\r\\nque describe escenarios, ejemplos y casos de uso; todo potencialmente automatizable. Tal como en `TDD`, pero de alto nivel: \ud83d\udfe5, \ud83d\udfe9 y \ud83d\udc68\u200d\ud83c\udfed. Postula que la colaboraci\xf3n entre el usuario\\r\\ny el equipo de desarrollo mejorar\xeda la definici\xf3n de lo que hay que desarrollar, su scope y la calidad del resultado.\\r\\n\\r\\nCada una de ellas tiene bastante literatura y teor\xeda, da para estudiarlas un buen rato. En este art\xedculo no profundizar\xe9\\r\\nmuch\xedsimo m\xe1s en cada una, pero s\xed te lo recomiendo encarecidamente.\\r\\n\\r\\n## C\xf3mo combinarlos\\r\\n\\r\\nAhora vamos a lo bueno.\\r\\n\\r\\n### Previo al desarrollo: refinamiento\\r\\n\\r\\nEn nuestro [backlog](https://scrumguides.org/scrum-guide.html#product-backlog) hay muchos potenciales incrementos,\\r\\ncada uno de ellos consiste en una idea de mejora del software.\\r\\nEl equipo de desarrollo toma cada una de estas ideas y las _procesa_ aplicando la `DOR`\\r\\n([Definition of Ready](https://www.scruminc.com/definition-of-ready/)), a este proceso lo conocemos como\\r\\n[refinamiento](https://less.works/less/framework/product-backlog-refinement).\\r\\n\\r\\nEl producto del refinamiento, adem\xe1s del dise\xf1o de una soluci\xf3n, ser\xe1 una\\r\\ndefinici\xf3n de la historia de\\r\\nusuario, la forma en que se podr\xe1 medir el incremento y acordaremos con el PO los criterios de aceptaci\xf3n aplicando estrategias de `BDD` y `DDD`.\\r\\nEstos \xfaltimos, si\\r\\nbien inicialmente solo estar\xe1n enunciados, debieran ser potencialmente programables como un test automatizado.\\r\\n\\r\\n#### BDD\\r\\n\\r\\nComenzamos a comprender el problema desde la perspectiva del usuario.\\r\\n\\r\\n:::tip Preguntas gu\xedas / BDD\\r\\n\\r\\n- \xbfQui\xe9n es el usuario?\\r\\n- \xbfQui\xe9n de mi equipo u organizaci\xf3n lo conoce de cerca?\\r\\n- \xbfQu\xe9 informaci\xf3n cuanti/cualitativa tengo o puedo conseguir acerca de su problem\xe1tica?\\r\\n- \xbfPuedo conversar con alguien que represente personalmente a ese usuario?\\r\\n- \xbfEn qu\xe9 escenarios o situaciones el usuario tiene la problem\xe1tica?\\r\\n- \xbfQu\xe9 expectativas tiene?\\r\\n- \xbfC\xf3mo puedo satisfacer esas expectativas?\\r\\n\\r\\n:::\\r\\n\\r\\n#### DDD\\r\\n\\r\\nLuego analizo c\xf3mo el negocio / organizaci\xf3n responde o debiera responder ante esta necesidad del usuario. Es\\r\\nprobable que alguna de estas situaciones ya est\xe9n siendo atendidas o que la organizaci\xf3n tenga algunas particularidades relevantes a tener en cuenta.\\r\\n\\r\\n:::tip Preguntas gu\xedas / DDD\\r\\n\\r\\n- \xbfConvers\xe9 con todos los actores de mi organizaci\xf3n que han enfrentado este problema antes?\\r\\n- \xbfAnalic\xe9 c\xf3mo lo resolv\xedan?\\r\\n- \xbfDise\xf1\xe9 un proceso para atender la necesidad? \xbfLo convers\xe9 con los otros actores de mi organizaci\xf3n?\\r\\n- \xbfQu\xe9 reglas de negocio, normativas o regulaciones debiera tener en cuenta?\\r\\n- \xbfExiste alg\xfan algoritmo o l\xf3gica complicada que sea relevante?\\r\\n- \xbfQu\xe9 objetos de valor o entidades estoy enriqueciendo o\\r\\nmodificando con este incremento?\\r\\n- \xbfQu\xe9 desarrolladores/equipos tienen o deber\xedan tener relaci\xf3n con esta historia?\\r\\n- \xbfConsider\xe9 en mi soluci\xf3n procesos de negocio o acuerdos est\xe1ndares de mi organizaci\xf3n (auditor\xeda, por ejemplo)?\\r\\n- \xbfConsider\xe9 la continuidad operacional del negocio? \xbfC\xf3mo mi soluci\xf3n impacta en el negocio?\\r\\n\\r\\n:::\\r\\n\\r\\n`BDD` y `DDD` nos ayudan a definir criterios de aceptaci\xf3n con foco en el objetivo (__outcome__).\\r\\n\\r\\n### Planning\\r\\n\\r\\nDurante la [__planning__](https://less.works/less/framework/sprint-planning-one),\\r\\ncada equipo elige un incremento que est\xe9 _listo_, para estos efectos:\\r\\nque al menos haya pasado por el proceso de refinamiento y cuente con\\r\\ncriterios de aceptaci\xf3n ya acordados con el PO.\\r\\n\\r\\nSi bien buena parte del trabajo debiera venir avanzado, ahora\\r\\nrevisar\xe9 y, si es necesario, dudar\xe9 de lo acordado. Intentar\xe9 aplicar\\r\\n_slicing_ (cortar el incremendo en incrementos m\xe1s peque\xf1os) y re-negociar\xe9\\r\\ncon el PO potenciales cambios o mejoras sobre los criterios de aceptaci\xf3n.\\r\\n\\r\\nEn este momento, tambi\xe9n, el equipo dise\xf1ar\xe1 una estrategia para el\\r\\nsprint: c\xf3mo dosificar la entrega del valor. Conseguir que el _delivery/release_ sea cotidiano le quitar\xe1 el riesgo a mi sprint y bajar\xe1 la\\r\\nansiedad de __La Gran Entrega__ justo antes de la _review_.\\r\\n\\r\\n### Desarrollo\\r\\n\\r\\nUna vez que, como equipo, elegimos un item del backlog y planificamos el _sprint_: comienza el desarrollo.\\r\\n\\r\\n#### Criterios de aceptaci\xf3n como test\\r\\n\\r\\nOrganizar\xe9 los criterios de aceptaci\xf3n de forma secuencial, suponiendo que\\r\\nexiste cierta linealidad en ellos. Los agrupar\xe9 en peque\xf1os _releases_\\r\\n(funcionalidades que puedo sacar a producci\xf3n). Tomar\xe9 el primero de ellos.\\r\\n\\r\\nComenzar\xe9 mi desarrollo con dos piezas claves:\\r\\n\\r\\n- Programar\xe9 los criterios de aceptaci\xf3n como [tests orientados al funcionamiento](blog/testing-101/#a-orientados-al-funcionamiento-black-box) [`BDD` y `TDD`, test fallando (\ud83d\udfe5)]\\r\\n- Configurar\xe9 y desplegar\xe9 [feature-toggles](https://en.wikipedia.org/wiki/Feature_toggle) necesarios para que mi incremento pueda vivir en producci\xf3n\\r\\nsin entorpecer el funcionamiento del resto del software\\r\\n\\r\\n#### Programaci\xf3n\\r\\n\\r\\n\xa1Ahora a programar!, usar\xe9 `DDD` y `TDD` para definir peque\xf1as funcionalidades: escribir\xe9 un test unitario (\ud83d\udd34), las l\xedneas de c\xf3digo que lo satisfagan (\ud83d\udfe2) y el refactor (\ud83d\udc68\u200d\ud83c\udfed).\\r\\n\\r\\nSeguir\xe9 programando test unitarios hasta conseguir que los test asociadas a mis criterios de aceptaci\xf3n pasen (`BDD`, \ud83d\udfe9) y en ese momento, tengo mi primer incremento listo para ser desplegado en producci\xf3n.\\r\\n\\r\\n### Rinse & Repeat\\r\\n\\r\\n![tdd double loop](./assets/double-tdd-schema.png)\\r\\n\\r\\nEste proceso incremental se repetir\xe1, intentando concentrar\\r\\nestrat\xe9gicamente el valor de la historia en los primeros\\r\\nreleases y, dejando para el final las mejoras que el\\r\\nequipo hayan decidido hacer por sobre los criterios acordados con el PO.\\r\\n\\r\\n## Recapitulando\\r\\n\\r\\n![outside in testing](./assets/outside-in-testing.png)\\r\\n\\r\\nComo ya habr\xe1n podido ver, cada paso de nuestro flujo de trabajo tiene una pincelada importante de estas estrategias.\\r\\n\\r\\nAlgunas ideas para cerrar:\\r\\n\\r\\n- DDD nos entrega la perspectiva del negocio, la visi\xf3n global, la estructura del dominio y la capacidad para abordar problemas t\xe9cnicos de forma consistente\\r\\n- BDD, la perspectiva del usuario. El permanente recordatorio de que tenemos que entender un problema real que aqueja a una persona\\r\\n- TDD, nos entrega herramientas para crear casos de prueba previo al desarrollo y ayuda a siempre mantener el foco\\r\\n\\r\\nConseguir desarrollar este ciclo con maestr\xeda puede tomar mucho tiempo, requiere disciplina, tenacidad, paciencia y, sobre todo, repetici\xf3n. Mucha repetici\xf3n.\\r\\n\\r\\n## Recursos\\r\\n\\r\\n- [Test Driven Development: By Example / Kent Beck / 2000](https://www.amazon.com/-/es/gp/product/B095SQ9WP4/)\\r\\n- [Reference - Domain-Driven Design / Eric Evans / 2015](https://www.domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf)\\r\\n- [Introducing BDD / Dan North / 2006](https://dannorth.net/introducing-bdd/)\\r\\n\\r\\n![meme](./assets/yoda-meme.jpg)"}]}')}}]);